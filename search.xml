<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>了解计算机</title>
      <link href="/2021/12/01/%E4%BA%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
      <url>/2021/12/01/%E4%BA%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<div align='center'>    <font size='70'>计算机</font></div><h2 id="计算机发展史"><a href="#计算机发展史" class="headerlink" title="计算机发展史"></a>计算机发展史</h2><p><img src="/img/uploads/image-20211201100506773.png" alt="image-20211201100506773"></p><p>从搜狗百科中看到计算机诞生于1943年12月，当时是由<strong>艾伦·图灵</strong>与高登·威奇曼仿造1938年的波兰解密机炸弹机所设计，但有的人并不认为这是一台完整的计算机，只是一台解密机。</p><blockquote><p>这个故事很有趣也很长，可以看一下电影《模仿游戏》讲述的就是图灵创建这个机器的原因和过程。主演是漫威里的奇异博士哦！</p></blockquote><blockquote><p>艾伦·图灵是一个很厉害的人，如果你不认识可以分别搜索以下词条看一下相关内容：<kbd>图灵测试</kbd>、<kbd>图灵机</kbd>、<kbd>艾伦图灵</kbd></p></blockquote><p><strong>第一代计算机</strong>采用电子管元件作基本器件，语言形式为机器语言或汇编语言。它所采用的二进位制与程序存贮等基本技术思想，奠定了现代电子计算机技术基础。以<strong>冯·诺依曼</strong>为代表。</p><blockquote><p>冯·诺依曼与艾伦·图灵被称为计算机之父。</p></blockquote><blockquote><p>机器语言就是一条指令即一组有意义的二进制代码，也就是计算机能看懂的语言。</p></blockquote><blockquote><p>为什么是二进制，这就涉及到计算机的组成了，第一代计算机采用电子管元件作基本器件，第二代计算机由晶体管代替电子管作为计算机的基础器件，后几代计算机都是集成电路作为基本器件，这些东西听起来很高大上，其实就是类似开关，开的时候代表1，关的时候代表0，所以机器只能识别二进制代码。但这些东西厉害的地方在于，可以在一块巧克力大小的cpu中安装几百万或者几亿的开关。</p><p>2000年，奔腾4威拉米特，生产工艺为180nm，cpu晶体管数量为4200万。<br>2010年推出的Corei7≤980X，制作工艺为32 nm，晶体管数量为11亿6999万9999个。<br>2018年苹果出的A12X处理器，晶体管数量超过了100亿。</p><p>关于硬件能力增长速率建议查一下<kbd>摩尔定律</kbd>:当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。</p><p>中央处理器（CPU）肉眼看它长这样：</p><p><img src="https://pic3.zhimg.com/80/v2-5a8d2956842f7dcca9ff4e5b8c926abb_720w.jpg?source=1940ef5c" alt="img"></p><p>放大后实际他长这样：</p><p><img src="https://images.anandtech.com/doci/7003/HSW_Wafer_03_575px.jpg" alt="img"></p></blockquote><p><strong>第二代计算机</strong>相比于第一代计算机在性能上有了很大的提高，并且出现了计算机高级语言，基础器件也变为了晶体管。</p><blockquote><p>每代计算机的划分就是看基本器件的类型。</p></blockquote><p><strong>第三代计算机</strong>除了在性能上得到提高外，计算机构成使用了中小规模集成电路成为计算机的主要部件，在软件方面，有了标准化的程序设计语言和人机会话式的Basic语言。</p><p><strong>第四代计算机</strong>同样在性能上得到提高，计算机构成使用了大规模集成电路成为计算机的主要部件，在软件方面，出现了精简指令集计算机（RISC），软件系统工程化、理论化，程序设计自动化。</p><blockquote><p>简要来说这四代计算机分别是电子管计算机、晶体管计算机、中小规模集成电路的计算机、基于超大规模集成电路的计算机。</p></blockquote><p>这就是计算机的发展历程，从使用上来讲，计算机本身就是用来对数据进行计算与存储的。到1969年美国的<kbd>ARPA net</kbd>的建立，出现了第一个网络，实现了信息共享。但网络的雏形早在1983年就以出现，ARPA和美国国防部通信局研制成功了用于异构网络的TCP/IP协议，该协议一直沿用至今。</p><p>所以什么是计算机，我认为从功能上讲，包含的<strong>计算</strong>、<strong>存储</strong>、<strong>网络</strong>的机器可以称为计算机。从结构上讲，冯·诺依曼在<strong>First Draft</strong>中描述了上图计算机结构的5大部件：输入设备、输出设备、存储器、控制器、运算器。除了<kbd>冯·诺依曼结构</kbd>还有<kbd>哈佛结构</kbd>有兴趣可以查一下</p><blockquote><p>所以智能手机也属于计算机的一种。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-0507274c566b259753f395de6b0a0cbc_r.jpg" alt="preview"></p><h2 id="计算机的类型"><a href="#计算机的类型" class="headerlink" title="计算机的类型"></a>计算机的类型</h2><p>按运算速度分类，可分为巨型机、大型机、小型机、工作站和微型计算机，微型机就是我们用的台式机、笔记本。<br>按照所处理的数据类型可分为模拟计算机、数字计算机和混合型计算机。<br>按照用途分类，分为超级计算机、网络计算机（服务器、工作站、集线器、交换机、路由器）、工业控制计算机（IPC、PLC、DCS、FCS、CNC）、个人计算机（台式机、电脑一体机、笔记本电脑、掌上电脑、平板电脑）、嵌入式计算机、分子计算机、量子计算机、光子计算机、纳米计算机、生物计算机、神经计算机。</p><blockquote><p>可编程序控制器（PLC）、分散型控制系统（DCS）、现场总线系统（FCS）、数控系统（CNC）</p></blockquote><h2 id="计算机构成"><a href="#计算机构成" class="headerlink" title="计算机构成"></a>计算机构成</h2><p>总体上说计算机由两部分构成：硬件、软件</p><p>硬件包含：电源、主板、CPU、内存、硬盘、声卡、显卡、网卡、输入设备（鼠标、键盘、摄像头等）、输出设备（打印机、显示屏、音响等）</p><blockquote><p>声卡、网卡现在一般已经集成到主板上了。</p></blockquote><p>软件又分为两类：系统软件、应用软件</p><ul><li>应用软件：为解决各类实际问题而设计的程序系统称为应用软件。从其服务对象的角度，又可分为通用软件和专用软件两类。（例如：QQ、微信、游戏、文档编辑器、浏览器等）</li><li>系统软件：操作系统、语言处理系统、服务程序、数据库系统</li></ul><blockquote><p>操作系统的种类繁多，依其功能和特性分为分批处理操作系统、分时操作系统和实时操作系统等；依同时管理用户数的多少分为单用户操作系统和多用户操作系统；适合管理计算机网络环境的网络操作系统。</p></blockquote><blockquote><p>操作系统又包含以下五部分内容：</p><p>（1）处理器管理：当多个程序同时运行时，解决处理器（CPU）时间的分配问题。<br>（2）作业管理：完成某个独立任务的程序及其所需的数据组成一个作业。作业管理的任务主要是为用户提供一个使用计算机的界面使其方便地运行自己的作业，并对所有进入系统的作业进行调度和控制，尽可能高效地利用整个系统的资源。<br>（3）存储器管理：为各个程序及其使用的数据分配存储空间，并保证它们互不干扰。<br>（4）设备管理：根据用户提出使用设备的请求进行设备分配，同时还能随时接收设备的请求（称为中断），如要求输入信息。<br>（5）文件管理：主要负责文件的存储、检索、共享和保护，为用户提供文件操作的方便。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 讨论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蕊希电台：成年人的崩溃只敢留给深夜</title>
      <link href="/2021/11/30/%E8%95%8A%E5%B8%8C%E7%94%B5%E5%8F%B0_%E6%88%90%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%B4%A9%E6%BA%83%E5%8F%AA%E6%95%A2%E7%95%99%E7%BB%99%E6%B7%B1%E5%A4%9C/"/>
      <url>/2021/11/30/%E8%95%8A%E5%B8%8C%E7%94%B5%E5%8F%B0_%E6%88%90%E5%B9%B4%E4%BA%BA%E7%9A%84%E5%B4%A9%E6%BA%83%E5%8F%AA%E6%95%A2%E7%95%99%E7%BB%99%E6%B7%B1%E5%A4%9C/</url>
      
        <content type="html"><![CDATA[<p>你有多久没舒服的睡一个好觉了？</p><p>陈安为了不跟女朋友异地，一腔奋勇地跑到女朋友所在的城市，当了一个快递员。</p><p>购物节那段时间，他突然在凌晨跟我开了一个视频，尽管他将镜头放在车顶，不让我看到他的脸，但我还是在接通的那一瞬间，注意到了他眼睛里的泪。</p><p>那天他送快递，因为快递太多有一个包裹被延误了三个小时，结果被客户投诉，扣了一百五十块钱。他说那一百五十块钱是他一天所有的收入，而那个月刚刚过去一半，他已经被扣了近八百块钱。</p><p>他说：” 我没什么想说的，我就是想哭。” 为了将扣掉的钱赚回来，他不得不送快递送到凌晨。为了能多分一些快递在自己手上，他必须每天六点起床，没有双休，没有节假日。</p><p>那天，陈安被扣完钱后不敢回家，怕女朋友看到他狼狈的样子，在外面晃荡到凌晨两点，又怕打扰女朋友休息，所以直接倒在沙发上睡了，第二天早上他女朋友还没起床，他就又匆匆出门了。</p><p>我不知道该怎么安慰他，生活不容易，只能跟他说我们都得挺下去。</p><p>小时候我们的父母会叫我们起床，催我们睡觉，但长大以后，没有人撵你睡觉，却有生活叫我们起床。</p><p>网上有一个段子：还有六七个月20后就要出生了，他们看我们就像我们看60后。</p><p>90后似乎已经跟60后一样成为了生活的主力军，他们每天奔波在城市的各个角落，为了梦想，为了生活拼命努力着。</p><p>记得刚来北京的时候，室友小兵到处找工作，一天有三到四场面试，有时候坐几个小时地铁转公交，只换来面试官一句： “ 好，我们聊完了，你回家等消息吧。 “</p><p>他连整理自己失落表情的时间都没有，又必须面带微笑地去赶下一场面试。</p><p>一整天下来小兵身心俱疲，回到家已经是深夜了，第二天早上醒来的时候手里还攥着没修改完的简历。</p><p>小兵原本定了早上八点的闹钟，却在六点半就醒了。连生物钟好像都在心疼他，因为只有六点半起床才能多参加一场面试，也就能多一分在这座城市生存下去的可能。</p><p>以前叫醒自己的是闹钟，现在叫醒自己的是生活，生活里的那些难永远比舒适来得早。</p><p>现在的我们，早起根本不需要闹钟，因为生活叫你起床的本事比闹钟还要准。</p><p>百度的大楼凌晨一点还灯火通明，在中关村半夜下班依旧需要排队打车。成年人的觉不是越睡越少，而是牺牲更多的睡眠时间，去拼搏，去努力。</p><p>谁没在深夜里痛苦挣扎过，我经常能在深夜的朋友圈里翻到孤独和梦想，也常常能在清晨看到诗和远方。</p><p>我相信你会前程似锦，也坚信你的未来可期，但晚上再好看的月亮，也美不过清晨的太阳，所以好好睡觉，把奋斗留给白天。</p><p>无论多美的妆，都要在天黑时卸掉，无论你今天过得多么糟糕，都请你在夜幕降临的时候回家。</p><p>我知道，生活还有一大堆的难题等着你去解决，除了争分夺秒你别无选择，但生活的难题永远一个接着一个，而我们每个人只有这短短的一生可以拥有。</p><p>成年人理当努力拼搏，但不该为了拼搏不顾一切，你要明白，你值得拥有最好的未来，但这一切的前提是，你要先拥有一个健康、快乐的自己。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蕊希 </tag>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蕊希电台：我终于要放下你了</title>
      <link href="/2021/11/30/%E8%95%8A%E5%B8%8C%E7%94%B5%E5%8F%B0_%E6%88%91%E7%BB%88%E4%BA%8E%E8%A6%81%E6%94%BE%E4%B8%8B%E4%BD%A0%E4%BA%86/"/>
      <url>/2021/11/30/%E8%95%8A%E5%B8%8C%E7%94%B5%E5%8F%B0_%E6%88%91%E7%BB%88%E4%BA%8E%E8%A6%81%E6%94%BE%E4%B8%8B%E4%BD%A0%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>和前任分手后没多久，我就从朋友口中得知他有了新欢。他带着新女朋友去哈尔滨看雪，而关于那场旅行，我们曾经计划了两年都没有实现。</p><p>虽然那时候我们已经分手了，但听到他的消息，我的心还是不由自主地疼了起来。我想起我们一起经历过的学生时代，想起我陪他走过的那些最穷的日子，我觉得不甘心。我想打电话质问他，想用最激烈的言辞骂他，想让他低头，想让他愧疚，想让他回来。</p><p>可事实上我什么都没做，我一个人默默消化着那些让人几近疯狂的情绪，因为理智让我在分手后做一个体面、优雅的前任。</p><p>被那种心绞痛一般的感受折磨了很久之后，我的伤口才慢慢痊愈。我开始能够自在的生活，开始重新融入朋友们的聚会，开始允许和接纳新的感情重新出现。</p><p>大概一年后的某天，我听到了他结婚的消息。这一次我心里没有嫉妒也没有难过，就像听到某个不知名明星的八卦消息一样，我甚至连好奇心都没有。</p><p>心死是一种奇妙的体验，很多次我以为这是痛苦的开始，可后来我才慢慢发现，它只是痛苦的终结。</p><p>我闺蜜几年前失恋，组过一个特别丧的局，她定了个包间，拉来身边单身的七八个朋友、同事一起吃火锅。</p><p>一开始，大家推杯换盏，举起酒杯都是敬单身、敬自由、敬喂了狗的爱情。围绕着热气腾腾的火锅，我们一个个表现得特别英勇和不屑。</p><p>后来，忘了是谁开了个头，桌上的人聊起了最后一次分手的原因。有一个姑娘一边嚼着红薯片儿，一边说： “ 那时候我在美国读书，盼啊盼啊，终于盼到了圣诞节，想着能回去看看他了。我打电话给他，开心得不得了，他却很平静。最后我们在电话里互道再见，没想到刚挂了电话，他的短信就来了，他说分手吧，我们不合适。 “</p><p>人哪有那么容易死心呢，除非真的看不见希望了。那年圣诞节，这个姑娘还是回国来见了心心念念的人，那人早有了新欢，劈腿后的隐瞒好像还是对她的怜悯似的。</p><p>那年那天，那桌火锅，我听了很多个狗血的爱情故事，聊到最后很多人都红了眼。我站在那群人里，也坚定地以为自己是一个想不开的人，是一个孤独的人，是一个没办法走出过去的人。</p><p>去年我这个闺蜜结婚了，嫁给了一个对她特别好的男人。在她婚礼上，我又见到了那群曾经和我一起吃单身火锅的姑娘。她们大多都已经结婚了，有的还带了另一半来参加婚礼，其他的人，要么已经开始了新的恋情，要么早就走出了我们聊过的那些不堪。</p><p>之前那个留学回来的姑娘，那天就站在舞台下面抢新娘的捧花，那是我第一次见她跳起来哈哈大笑的样子，我想她一定比过去要幸福得多。</p><p>过去我们被旧的感情裹挟，可能谁都没想到，等到真正死心之后，我们会过得比从前更快乐。</p><p>我们被我们爱的人用失望击垮，我们体会到心痛、难过、绝望和无可奈何，我们以为我们再也不会因此而爱上谁，却也会突然有一天重新品尝爱的滋味，感受被爱的温情。</p><p>这个世界上有鱼儿离不开水，却不会有哪个人真的离不开另一个人。所有的心酸不悦，都只是因为你还念着旧情，你还怀有期待。等到真正死心的那一天，一个新的世界会朝你走来，你会发现，离开Ta，你也能过得很快乐，甚至胜过从前。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
            <tag> 蕊希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础_学习目标_如何搭建一台linux服务器</title>
      <link href="/2021/11/29/%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/11/29/%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p>学习如何安装VMware，并进行产品安装</p></li><li><p>学习如何在VMware中安装CentOS系统（CentOS镜像下载<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">国外</a> \ <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">国内</a>）</p></li><li><p>学习如何使用linux系统的终端（<a href="https://www.runoob.com/linux/linux-tutorial.html">查看教程</a>）</p><ul><li>通过终端在自己的目录下创建一个文件夹test</li><li>通过终端在普通用户与root用户之间进行跳转</li><li>学习如何在Linux系统的终端中进行文件的查看、复制、移动、删除、创建、编辑</li><li>学习如何通过终端创建用户并修改用户密码</li><li>下载一个新的命令包并使用（以sl为例）</li><li>…（教程中所有的执行代码都要做一遍并理解其中含义，如下图所示）</li></ul><p><img src="/img/post/541d59ca9700cb51cd10a0a1e22c8a5.png" alt="图片1"></p><ul><li>查找apt与yum两个命令的区别（可选）</li><li>查找vim编辑器的发展历史（可选）</li></ul></li><li><p>在linux服务器中安装mysql（<a href="https://www.runoob.com/linux/mysql-install-setup.html">查看教程</a>）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo建立中关于linux的node版本过低问题</title>
      <link href="/2021/11/28/hexo%E5%BB%BA%E7%AB%8B%E4%B8%AD%E5%85%B3%E4%BA%8Elinux%E7%9A%84node%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/28/hexo%E5%BB%BA%E7%AB%8B%E4%B8%AD%E5%85%B3%E4%BA%8Elinux%E7%9A%84node%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在云服务器（centos）中通过yum安装node后默认安装版本比较低，不能使hexo进行初始化。</p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>先确认系统是否安装过epel-release包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info epel-release</span><br></pre></td></tr></table></figure><p>如果有相关已安装的信息，则说明已经安装，如果提示没有安装则执行安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>安装完成后，就可以使用yum命令安装nodejs了，安装的版本一般默认是6.x的版本，npm（3.x）作为依赖会一起安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure><p>安装完成后，查看版本 node -v ，如果输出如下版本信息则说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v6.13.3</span><br></pre></td></tr></table></figure><h2 id="升级node"><a href="#升级node" class="headerlink" title="升级node"></a>升级node</h2><p>安装n，n是nodejs管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure><p>安装nodejs最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n latest</span><br></pre></td></tr></table></figure><p>若安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n 10.1.3</span><br></pre></td></tr></table></figure><p>切换nodejs版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure><p>选择已安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   node/10.1.3</span><br><span class="line">o  node/10.15.1</span><br></pre></td></tr></table></figure><p>查看当前版本 node -v 输出如下则切换成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v10.15.1</span><br></pre></td></tr></table></figure><h2 id="使用n切换nodejs版本失效解决办法"><a href="#使用n切换nodejs版本失效解决办法" class="headerlink" title="使用n切换nodejs版本失效解决办法"></a>使用n切换nodejs版本失效解决办法</h2><p>查看当前 nodejs 安装路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> node</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/node <span class="comment">#我的路径地址</span></span><br></pre></td></tr></table></figure><p>而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把bin、lib、include、share 复制该路径中，所以我们必须通过N_PREFIX变量来修改 n 的默认node安装路径。<br>编辑环境配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>将下面两行代码插入到文件末尾：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> N_PREFIX=/usr/<span class="built_in">local</span> <span class="comment">#node实际安装位置</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$N_PREFIX</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>编辑完成后 esc :wq 保存退出</p><p>执行source使修改生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这时再 node -v 查看版本信息发现切换成功了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建typecho</title>
      <link href="/2021/03/28/%E9%87%8D%E5%BB%BAtypecho/"/>
      <url>/2021/03/28/%E9%87%8D%E5%BB%BAtypecho/</url>
      
        <content type="html"><![CDATA[<p>由于云服务器的到期，做了系统迁移后docker的所有容器都产生了失效的问题，以至于博客长时间关闭。</p><p>为了以后家庭服务器及自己更好的记录信息，进行了重新部署与数据迁移工作。</p><p>此次部署与之前有所区别，防止云服务器到期，typecho部署在虚拟机上，也不在采用docker形式，更换为LNMP部署</p><p>LNMP:（L：Linux操作系统，N：nginx服务，M：mysql服务，P：php服务）</p><p>重建过程中遇到以下几点问题进行记录：</p><p>1、在centos中不能直接对nginx进行yum安装，解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>2、数据迁移中由于typecho的版本导致的表结构不同，进而数据不能直接通过sqlyog进行直接的数据同步，通过kettle进行表数据输出/输入。</p><p>3、kettle使用过程中，数据导入时中文乱码变为‘?’，且在【DB连接】中设置表输入编码时报错“Error working with Xul definition”，解决方法：</p><pre><code>乱码问题再【DB连接中进行更改编码格式】，报错问题是由于jdk版本过高导致的。</code></pre><p>4、重新部署typecho时，设置数据存储报错‘无法连接数据库’，解决方法：</p><pre><code>数据库需要存在对应的表。</code></pre><p>5、linux中查看文件夹所占空间大小：du -h 【文件夹名】</p><p>6、typecho的安装过程：</p><pre><code>【在官网下载压缩包】-【解压】-【解压后的文件夹下build重命名为typecho移动到nginx对应目录下】-【对nginx.conf进行配置】</code></pre><p>7、Centos关闭防火墙命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service    <span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl stop firewalld.service    <span class="comment">#直接关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service    <span class="comment">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure><p>额外查到：</p><blockquote><p>另外</p><p>必须都执行，不要问什么。要不你的hadoop集群肯定出问题。</p><p>sudo systemctl stop firewalld.service sudo systemctl disable<br>firewalld.service sudo systemctl stop iptables.service sudo systemctl<br>disable iptables.service</p><p>sudo vim /etc/selinux/config</p><p>注释下面两行：</p><p>#SELINUX=enforcing</p><p>#SELINUXTYPE=targeted</p><p>sudo setenforce 0</p></blockquote><p>8、nginx.conf配置内容</p><pre><code>server &#123;     listen     80;     server_name   yourdomain.com;     root      /home/yourdomain/www/;     index      index.html index.htm index.php;      if (!-e $request_filename) &#123;         rewrite ^(.*)$ /index.php$1 last;     &#125;      location ~ .*\.php(\/.*)*$ &#123;         include fastcgi.conf;         fastcgi_pass 127.0.0.1:9000;     &#125;      #access_log logs/yourdomain.log combined;&#125;</code></pre><p>9、查看端口占用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:[端口]</span><br><span class="line">netstat -aptn    <span class="comment">#查看所有开启的端口号</span></span><br><span class="line">netstat -nupl    <span class="comment">#查看系统中所有使用udp协议的端口号</span></span><br><span class="line">telnet ip port</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep查找指定内容的文件</title>
      <link href="/2020/12/15/grep%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/2020/12/15/grep%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Linux grep 命令用于查找文件里符合条件的字符串。grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。</p><p><strong>参数：</strong></p><p>-r 是递归查找<br>-n 是显示行号<br>-R 查找所有文件包含子目录<br>-i 忽略大小写<br>-v 排除所带字符的行<br>—xargs配合grep查找</p><p><strong>例：</strong></p><p><code>grep -r string ./</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表同步语句</title>
      <link href="/2020/12/15/%E8%A1%A8%E5%90%8C%E6%AD%A5%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/12/15/%E8%A1%A8%E5%90%8C%E6%AD%A5%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `data_1` (`id`,`QIDIAN`,`zhongdian`,`gongsi`,`hangban`,`shijian`,`zhundian`,`jiage`,`luru`)</span><br><span class="line">SELECT `id`,`起点`,`终点`,`航空公司`,`航班`,`起飞时间--&gt;到达时间`,`准点率`,`最低价格`,`录入时间`</span><br><span class="line">FROM `data`</span><br><span class="line">WHERE `id` NOT IN (SELECT id FROM `data_1`);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows镜像文件下载</title>
      <link href="/2020/12/11/windows%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/12/11/windows%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>镜像文件下载地址：</p><p><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p>这个网站提供了各个版本的Windows系统下载，这些镜像是从微软官方的服务器上获取的，全部都是未经改写的正版纯净原装系统。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜像 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机下载</title>
      <link href="/2020/12/09/%E9%9D%B6%E6%9C%BA%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/12/09/%E9%9D%B6%E6%9C%BA%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>OWASP靶机下载</p><p>下载地址：<a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a></p><p>一般可直接点击“Download Latest Version”下载最新版本的OWASP靶机</p><p><img src="/img/uploads/2020/12/1608878803.png"></p><p>开机密码 root/owaspbwa；</p><p>Metasploitable2靶机下载</p><p>下载地址：<br><a href="https://sourceforge.net/projects/metasploitable/">https://sourceforge.net/projects/metasploitable/</a></p><p><img src="/img/uploads/2020/12/1392214432.png"></p><p>使用默认用户名msfadmin密码msfadmin登录</p><p><strong>kali linux从入门到入狱<br>kali玩的好，牢饭吃到饱</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册Maltego显示ReCaptcha is not valid，解决Google验证码服务reCaptcha失效问题</title>
      <link href="/2020/12/07/Maltego%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9C%8D%E5%8A%A1%E5%A4%B1%E6%95%88/"/>
      <url>/2020/12/07/Maltego%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9C%8D%E5%8A%A1%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Maltego简介"><a href="#Maltego简介" class="headerlink" title="Maltego简介"></a>Maltego简介</h1><p>Maltego是一款非常优秀的信息收集工具。与其他工具相比，不仅功能强大，而且自动化水平非常高，不需要复杂的命令，就能轻松的完成信息收集。</p><p><strong>Maltego注册地址：<a href="https://www.paterva.com/web7/community/community.php">https://www.paterva.com/web7/community/community.php</a></strong></p><h2 id="1-下载Firefox浏览器，并安装插件。"><a href="#1-下载Firefox浏览器，并安装插件。" class="headerlink" title="1. 下载Firefox浏览器，并安装插件。"></a>1. 下载Firefox浏览器，并安装插件。</h2><p><img src="/img/uploads/2020/12/1874331350.png"></p><h2 id="2-打开Redirector插件的界面"><a href="#2-打开Redirector插件的界面" class="headerlink" title="2. 打开Redirector插件的界面"></a>2. 打开Redirector插件的界面</h2><p><img src="/img/uploads/2020/12/3908748646.png"></p><h2 id="3-弹出一个对话框"><a href="#3-弹出一个对话框" class="headerlink" title="3. 弹出一个对话框"></a>3. 弹出一个对话框</h2><p><img src="/img/uploads/2020/12/4249685053.png"></p><h2 id="4-如下填写"><a href="#4-如下填写" class="headerlink" title="4. 如下填写"></a>4. 如下填写</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description：Google Recaptcha</span><br><span class="line">Example URL：https://www.google.com/recaptcha/api.js</span><br><span class="line">Include pattern：https://www.google.com/recaptcha/api.js</span><br><span class="line">Redirect to：https://www.recaptcha.net/recaptcha/api.js</span><br></pre></td></tr></table></figure><p><img src="/img/uploads/2020/12/1651262716.png"></p><p>Save 之后就完成了配置。<br>这时就将Google的验证码服务reCaptcha重定向到了国内路由可达的URL，Google的验证码服务也就可以正常使用了。</p><h2 id="5-原来出不来验证码captcha，现在有了。"><a href="#5-原来出不来验证码captcha，现在有了。" class="headerlink" title="5. 原来出不来验证码captcha，现在有了。"></a>5. 原来出不来验证码captcha，现在有了。</h2><p><img src="/img/uploads/2020/12/1495963272.png"></p><p>作者：beeworkshop<br>链接：<a href="https://www.jianshu.com/p/c75d0897e878">https://www.jianshu.com/p/c75d0897e878</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux更改系统时间</title>
      <link href="/2020/12/07/linux%E6%9B%B4%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2020/12/07/linux%E6%9B%B4%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>修改步骤如下：</p><ul><li>查看当前系统时间 date</li><li>修改当前系统时间 date -s “2018-2-22 19:10:30</li><li>查看硬件时间 hwclock –show</li><li>修改硬件时间 hwclock –set –date “2018-2-22 19:10:30”</li><li>同步系统时间和硬件时间 hwclock –hctosys</li><li>保存时钟 clock -w</li><li>重启系统（init 6）后便发现系统时间被修改了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7关闭图形化界面</title>
      <link href="/2020/12/03/Centos7%E5%85%B3%E9%97%AD%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/12/03/Centos7%E5%85%B3%E9%97%AD%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>CentOS 7 中直接使用 systemd 指令修改启动目的状态即可。</p><p>使用，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure><p>可以查询到当前所设定的状态。multi-user.target 相当于以前的 level 3，也就是命令行终端；而 graphical.target 相当于以前的 level 5，也就是图形界面。</p><p>如果要设置默认启动到图形界面，则执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure><p>如果要设置默认启动到命令行终端，则执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali的apt-get无法更新解决办法</title>
      <link href="/2020/12/02/kali%E7%9A%84apt-get%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/12/02/kali%E7%9A%84apt-get%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>问题一：</strong></p><p>编辑apt-get远程源文件<br>vim /etc/apt/sources-list<br>注释掉所有的，然后添加下面两条：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#中科大</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main contrib non-free</span><br><span class="line">deb http://old.kali.org/kali sana main non-free contrib</span><br></pre></td></tr></table></figure><p>再次更新：已经可以更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ro apt-get update</span><br></pre></td></tr></table></figure><p>更新命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade</span><br></pre></td></tr></table></figure><p><strong>问题二：</strong></p><p>更换了本地源 依旧无法更新<br>原因是key过期了 需要重新添加，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali开启ssh服务</title>
      <link href="/2020/12/02/kali%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/12/02/kali%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>一、配置SSH参数</strong></p><p>1.<br>修改sshd_config文件，命令为：<br><code>vi /etc/ssh/sshd_config</code><br>将#PasswordAuthentication no的注释去掉，并且将NO修改为YES //kali中默认是yes</p><p>2.<br>将PermitRootLogin without-password修改为<br>PermitRootLogin yes</p><p>3.<br>然后，保存，退出vim。</p><p><strong>二、启动SSH服务</strong></p><p>命令为：<br><code>/etc/init.d/ssh start</code><br>或者<br><code>service ssh start</code></p><p>查看SSH服务状态是否正常运行，命令为：<br><code>/etc/init.d/ssh status</code><br>或者<br><code>service ssh status</code></p><p>设置开机自启动SSH服务<br><code>systemctl enable ssh</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL分支-MariaDB安装</title>
      <link href="/2020/11/27/MySQL%E5%88%86%E6%94%AF_MariaDB%E5%AE%89%E8%A3%85/"/>
      <url>/2020/11/27/MySQL%E5%88%86%E6%94%AF_MariaDB%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><strong>安装教程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用yum安装mysql数据库的软件包</span></span><br><span class="line">yum -y install mariadb-server mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#mariadb-server#MariaDB数据库</span></span><br><span class="line"><span class="comment">#mariadb#MariaDB服务器Linux下客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注：从centos7系统开始，系统中自带的mysql数据库变成了mariadb-server，mariadb-server和mysql操作上一样。mariadb-server是mysql的一个分支。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动数据库服务</span></span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装完mariadb-server后，运行mysql_secure_installation去除安全隐患</span></span><br><span class="line">mysql_secure_installation<span class="comment">#进入安全配置导向</span></span><br></pre></td></tr></table></figure><p><strong>之后会遇到六个选项</strong></p><p>Enter current password for root (enter for none):          #初次运行直接回车，因为root用户没有密码<br>Set root password? [Y/n] Y        #是否设置root用户密码,输入Y<br>Remove anonymous users? [Y/n] Y        #是否删除匿名用户,生产环境建议删除，所以直接回车或Y<br>Disallow root login remotely? [Y/n] Y        #是否禁止root远程登录,根据自己的需求选择Y/n并回车,建议禁止<br>Remove test database and access to it? [Y/n] Y         #是否删除test数据库,直接回车或Y<br>Reload privilege tables now? [Y/n] Y        #是否重新加载权限表，直接回车</p><p><strong>至此数据库安装成功。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python——pip国内镜像</title>
      <link href="/2020/10/25/python_pip%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
      <url>/2020/10/25/python_pip%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="pip国内镜像地址："><a href="#pip国内镜像地址：" class="headerlink" title="pip国内镜像地址："></a>pip国内镜像地址：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">阿里云：https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">华中理工大学：https://pypi.hustunique.com/</span><br><span class="line">山东理工大学：https://pypi.sdutlinux.org/ </span><br><span class="line">豆瓣：https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h3 id="pip命令"><a href="#pip命令" class="headerlink" title="pip命令"></a>pip命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http://pypi.douban.com/simple/ 包名</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple/ 包名</span><br><span class="line">pip install -i https://pypi.mirrors.ustc.edu.cn/simple/ 包名</span><br></pre></td></tr></table></figure><h3 id="pip更新命令"><a href="#pip更新命令" class="headerlink" title="pip更新命令"></a>pip更新命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><h3 id="python查询已安装包方法："><a href="#python查询已安装包方法：" class="headerlink" title="python查询已安装包方法："></a>python查询已安装包方法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><h3 id="python-安装包位置"><a href="#python-安装包位置" class="headerlink" title="python 安装包位置"></a>python 安装包位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show 已安装包名</span><br></pre></td></tr></table></figure><p>Python脚本后台运行的几种方式:<br><a href="https://blog.csdn.net/dodott/article/details/82789379">https://blog.csdn.net/dodott/article/details/82789379</a></p><p>python的网络编程:<br><a href="https://www.cnblogs.com/LY-C/p/9089331.html">https://www.cnblogs.com/LY-C/p/9089331.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux——对用户的操作</title>
      <link href="/2020/10/25/Linux_%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/10/25/Linux_%E5%AF%B9%E7%94%A8%E6%88%B7%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>添加用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ useradd -m username</span><br></pre></td></tr></table></figure><p><strong>删除用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ userdel -r username</span><br></pre></td></tr></table></figure><p><strong>修改用户密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd username</span><br></pre></td></tr></table></figure><p><strong>修改用户名</strong></p><p>我们使用 usermod 来修改用户名。其语法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ usermod -l new_username old_username</span><br></pre></td></tr></table></figure><p>这只会更改用户名，而其他的东西，比如用户组，家目录，UID 等都保持不变。</p><p><strong>注意</strong>：- 你需要从要改名的帐号中登出并杀掉该用户的所有进程，要杀掉该用户的所有进程可以执行下面命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pkill -u dan</span><br><span class="line">$ sudo pkill -9 -u dan</span><br></pre></td></tr></table></figure><p><strong>修改家目录</strong></p><p>要同时更改家目录，我们需要在执行 usermod 命令的同时加上 -d 选项，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -d /home/susan -m susan</span><br></pre></td></tr></table></figure><p><strong>更改用户 UID</strong></p><p>执行下面命令修改用户 UID，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -u 2000 susan</span><br></pre></td></tr></table></figure><p>这里 2000 就是用户的新 UID。</p><p><strong>修改用户组名</strong></p><p>要把用户组名从 dan 修改为 susan，我们需要使用 groupmod 命令。使用下面命令来修改用户组名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groupmod -n susan dan</span><br></pre></td></tr></table></figure><p>做完修改后，可以使用 id 命令来检查，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ id susan</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux日志文件</title>
      <link href="/2020/10/24/linux%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/"/>
      <url>/2020/10/24/linux%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>内核及公共消息日志:/var/log/messages</li><li>计划任务日志：/var/log/cron</li><li>系统引导日志：/var/log/dmesg</li><li>邮件系统日志:/var/log/maillog</li><li>用户登录日志：/var/log/lastlog</li><li>/var/log/boot.log（记录系统在引导过程中发生的时间）</li><li>/var/log/secure (用户验证相关的安全性事件)</li><li>/var/log/wtmp(当前登录用户详细信息)</li><li>/var/log/btmp（记录失败的的记录）</li><li>/var/run/utmp（用户登录、注销及系统开、关等事件）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 插入mysql数据库字符串中含有单引号或双引号报错</title>
      <link href="/2020/10/24/python%20%E6%8F%92%E5%85%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%AB%E6%9C%89%E5%8D%95%E5%BC%95%E5%8F%B7%E6%88%96%E5%8F%8C%E5%BC%95%E5%8F%B7%E6%8A%A5%E9%94%99/"/>
      <url>/2020/10/24/python%20%E6%8F%92%E5%85%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%AB%E6%9C%89%E5%8D%95%E5%BC%95%E5%8F%B7%E6%88%96%E5%8F%8C%E5%BC%95%E5%8F%B7%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>通过escape_string变换一下格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pymysql.escape_string(str_content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux设置ssh服务的黑白名单</title>
      <link href="/2020/10/23/linux%E8%AE%BE%E7%BD%AEssh%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95/"/>
      <url>/2020/10/23/linux%E8%AE%BE%E7%BD%AEssh%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="修改-etc-hosts-allow白名单文件与-etc-hosts-deny黑名单文件"><a href="#修改-etc-hosts-allow白名单文件与-etc-hosts-deny黑名单文件" class="headerlink" title="# 修改/etc/hosts.allow白名单文件与/etc/hosts.deny黑名单文件"></a># 修改/etc/hosts.allow白名单文件与/etc/hosts.deny黑名单文件</h2><p><strong>修改/etc/hosts.allow文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># hosts.allow This file describes the names of the hosts which are</span><br><span class="line"># allowed to use the local INET services, as decided</span><br><span class="line"># by the ‘/usr/sbin/tcpd’ server.</span><br><span class="line">#</span><br><span class="line">sshd:210.13.218.*:allow</span><br><span class="line">sshd:222.77.15.*:allow</span><br></pre></td></tr></table></figure><p>以上写法表示允许210和222两个ip段连接sshd服务（这必然需要hosts.deny这个文件配合使用），当然:allow完全可以省略的。</p><p>当然如果管理员集中在一个IP那么这样写是比较省事的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all:218.24.129.110</span><br></pre></td></tr></table></figure><p>他表示接受110这个ip的所有请求！</p><p><strong>/etc/hosts.deny文件，此文件是拒绝服务列表，文件内容如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># hosts.deny This file describes the names of the hosts which are</span><br><span class="line"># *not* allowed to use the local INET services, as decided</span><br><span class="line"># by the ‘/usr/sbin/tcpd’ server.</span><br><span class="line">#</span><br><span class="line"># The portmap line is redundant, but it is left to remind you that</span><br><span class="line"># the new secure portmap uses hosts.deny and hosts.allow. In particular</span><br><span class="line"># you should know that NFS uses portmap!</span><br><span class="line">sshd:all:deny</span><br></pre></td></tr></table></figure><p>注意看：sshd :all :deny表示拒绝了所有sshd远程连接。:deny可以省略。<br>所以：当hosts.allow和 host.deny相冲突时，以hosts.allow设置为准。</p><p><strong>注意修改完后：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service xinetd restart</span><br></pre></td></tr></table></figure><p>才能让刚才的更改生效。<br>/etc/hosts.allow（允许）和/etc/hosts.deny（禁止）这两个文件是tcpd服务器的配置文件<br>tcpd服务器可以控制外部IP对本机服务的访问<br>linux 系统会先检查/etc/hosts.deny规则，再检查/etc/hosts.allow规则，如果有冲突 按/etc/hosts.allow规则处理</p><p>比如：<br>1.禁止所有ip访问linux 的ssh功能```<br>service xinetd restart</p><p>```<br>可以在/etc/hosts.deny添加一行 sshd :all :deny</p><p>2.禁止某一个ip（192.168.11.112）访问ssh功能<br>可以在/etc/hosts.deny添加一行sshd :192.168.11.112</p><p>3.如果在/etc/hosts.deny和/etc/hosts.allow同时 有sshd :192.168.11.112 规则，则192.168.11.112可以访问主机的ssh服务<br>总结：通过这种方法可以控制部分非授权访问，但不是一劳永逸的方法！我们在看服务日志的时候或许会看到很多扫描记录，不是还是直接针对root用户的，这时控制你的访问列表就非常有作用了！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用flask实现api</title>
      <link href="/2020/10/22/%E7%94%A8flask%E5%AE%9E%E7%8E%B0api/"/>
      <url>/2020/10/22/%E7%94%A8flask%E5%AE%9E%E7%8E%B0api/</url>
      
        <content type="html"><![CDATA[<p><strong>代码:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify,request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> cross_origin</span><br><span class="line"><span class="keyword">from</span> conf <span class="keyword">import</span> select_data,change,select_data2</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;JSON_AS_ASCII&quot;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/1&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@cross_origin(<span class="params">supports_credentials=<span class="literal">True</span></span>)</span><span class="comment">#解决接口跨域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api1</span>():</span></span><br><span class="line"><span class="comment">#url/api/1?city=上海&amp;date=2020-10-10</span></span><br><span class="line">fcity = <span class="string">&#x27;呼和浩特&#x27;</span></span><br><span class="line">tcity = request.args[<span class="string">&#x27;city&#x27;</span>]<span class="comment">#获取get提交的变量</span></span><br><span class="line">date = request.args[<span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">trip = fcity+<span class="string">&#x27;——&gt;&#x27;</span>+tcity</span><br><span class="line">datas=select_data(fcity,tcity,date)<span class="comment">#获取数据库数据</span></span><br><span class="line">x,y=change(datas,date)<span class="comment">#改变数据格式</span></span><br><span class="line"></span><br><span class="line">fcity,tcity=tcity,fcity</span><br><span class="line">trip2 = fcity+<span class="string">&#x27;——&gt;&#x27;</span>+tcity</span><br><span class="line">datas=select_data(fcity,tcity,date)</span><br><span class="line">x2,y2=change(datas,date)</span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">&#x27;fcity&#x27;</span>:fcity,<span class="string">&#x27;tcity&#x27;</span>:tcity,<span class="string">&#x27;date&#x27;</span>:date,<span class="string">&#x27;x&#x27;</span>:x,<span class="string">&#x27;datas&#x27;</span>:&#123;<span class="number">1</span>:&#123;<span class="string">&#x27;trip&#x27;</span>:trip,<span class="string">&#x27;y&#x27;</span>:y&#125;,<span class="number">2</span>:&#123;<span class="string">&#x27;trip&#x27;</span>:trip2,<span class="string">&#x27;y&#x27;</span>:y2&#125;&#125;&#125;<span class="comment">#将数据写成json格式</span></span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;0&quot;</span>, <span class="string">&quot;data&quot;</span>:data, <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;操作成功&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/2&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@cross_origin(<span class="params">supports_credentials=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api2</span>():</span></span><br><span class="line"><span class="comment">#url/api/2?city=上海</span></span><br><span class="line">fcity = <span class="string">&#x27;呼和浩特&#x27;</span></span><br><span class="line">tcity = request.args[<span class="string">&#x27;city&#x27;</span>]</span><br><span class="line">trip = fcity+<span class="string">&#x27;——&gt;&#x27;</span>+tcity</span><br><span class="line">datas=select_data2(fcity,tcity)</span><br><span class="line">x=<span class="built_in">list</span>(datas)</span><br><span class="line">y1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">y1.append(datas[i])</span><br><span class="line"></span><br><span class="line">fcity,tcity=tcity,fcity</span><br><span class="line">trip2 = fcity+<span class="string">&#x27;——&gt;&#x27;</span>+tcity</span><br><span class="line">datas=select_data2(fcity,tcity)</span><br><span class="line">y2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">y2.append(datas[i])</span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">&#x27;fcity&#x27;</span>:fcity,<span class="string">&#x27;tcity&#x27;</span>:tcity,<span class="string">&#x27;x&#x27;</span>:x,<span class="string">&#x27;datas&#x27;</span>:&#123;<span class="number">1</span>:&#123;<span class="string">&#x27;trip&#x27;</span>:trip,<span class="string">&#x27;y&#x27;</span>:y1&#125;,<span class="number">2</span>:&#123;<span class="string">&#x27;trip&#x27;</span>:trip2,<span class="string">&#x27;y&#x27;</span>:y2&#125;&#125;&#125;</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;0&quot;</span>, <span class="string">&quot;data&quot;</span>:data, <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;操作成功&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JavaScript中的Ajax对api数据进行获取</title>
      <link href="/2020/10/21/%E4%BD%BF%E7%94%A8JavaScript%E4%B8%AD%E7%9A%84Ajax%E5%AF%B9api%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%8E%B7%E5%8F%96/"/>
      <url>/2020/10/21/%E4%BD%BF%E7%94%A8JavaScript%E4%B8%AD%E7%9A%84Ajax%E5%AF%B9api%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="attr">url</span>:url_n,<span class="comment">//api的url</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,<span class="comment">//请求方式</span></span><br><span class="line"><span class="comment">//data: cityid,</span></span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">contentType</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//获取数据</span></span><br><span class="line">trip1=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;trip&#x27;</span>];</span><br><span class="line">trip2=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;2&#x27;</span>][<span class="string">&#x27;trip&#x27;</span>];</span><br><span class="line">y1=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">y2=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;2&#x27;</span>][<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">xxx=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line">fcity=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;fcity&#x27;</span>]</span><br><span class="line">tcity=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;tcity&#x27;</span>]</span><br><span class="line">date=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;date&#x27;</span>]</span><br><span class="line"><span class="comment">//console.log(xxx)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> xxx,y1,y2,trip1,trip2,fcity,tcity,date</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于echarts实现前端数据可视化</title>
      <link href="/2020/10/21/%E5%9F%BA%E4%BA%8Eecharts%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2020/10/21/%E5%9F%BA%E4%BA%8Eecharts%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line"><span class="attr">title</span>: &#123;</span><br><span class="line"><span class="attr">text</span>: date+<span class="string">&#x27; 机票最低价格走势&#x27;</span>,<span class="comment">//主标题</span></span><br><span class="line"><span class="attr">textStyle</span>: &#123;</span><br><span class="line"><span class="attr">fontSize</span>: <span class="number">20</span><span class="comment">//主标题文字大小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//subtext: &#x27;纯属虚构&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">tooltip</span>: &#123;</span><br><span class="line"><span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">legend</span>: &#123;</span><br><span class="line"><span class="attr">data</span>: [trip1, trip2]<span class="comment">//类型标签</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">toolbox</span>: &#123;</span><br><span class="line"><span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">feature</span>: &#123;</span><br><span class="line"><span class="attr">dataZoom</span>: &#123;</span><br><span class="line"><span class="attr">yAxisIndex</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">dataView</span>: &#123;<span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,</span><br><span class="line"><span class="attr">magicType</span>: &#123;<span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]&#125;,<span class="comment">//可视化类型line线图、bar条形图</span></span><br><span class="line"><span class="attr">restore</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">saveAsImage</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">xAxis</span>: &#123;<span class="comment">//x轴</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,<span class="comment">//坐标轴类型category类目轴</span></span><br><span class="line"><span class="attr">boundaryGap</span>: <span class="literal">false</span>,<span class="comment">//坐标轴两边留白策略</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;查询日期&#x27;</span>,<span class="comment">//x轴标签</span></span><br><span class="line"><span class="attr">data</span>: xxx<span class="comment">//x轴刻度</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">yAxis</span>: &#123;<span class="comment">//y轴</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,<span class="comment">//value数值轴</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;机票价格&#x27;</span>,<span class="comment">//y轴标签</span></span><br><span class="line"><span class="attr">axisLabel</span>: &#123;</span><br><span class="line"><span class="attr">formatter</span>: <span class="string">&#x27;&#123;value&#125; 元&#x27;</span><span class="comment">//单位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">series</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: trip1,<span class="comment">//名称</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,<span class="comment">//类型</span></span><br><span class="line"><span class="attr">data</span>: y1,<span class="comment">//数据</span></span><br><span class="line"><span class="attr">markPoint</span>: &#123;<span class="comment">//点标签</span></span><br><span class="line"><span class="attr">data</span>: [</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">markLine</span>: &#123;<span class="comment">//画线</span></span><br><span class="line"><span class="attr">data</span>: [</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: trip2,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: y2,</span><br><span class="line"><span class="attr">markPoint</span>: &#123;</span><br><span class="line"><span class="attr">data</span>: [</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">markLine</span>: &#123;</span><br><span class="line"><span class="attr">data</span>: [</span><br><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span>&#125;,</span><br><span class="line">[&#123;</span><br><span class="line"><span class="attr">symbol</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line"><span class="attr">x</span>: <span class="string">&#x27;90%&#x27;</span>,</span><br><span class="line"><span class="attr">yAxis</span>: <span class="string">&#x27;max&#x27;</span></span><br><span class="line">&#125;, &#123;<span class="comment">//最高点画线</span></span><br><span class="line"><span class="attr">symbol</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line"><span class="attr">label</span>: &#123;</span><br><span class="line"><span class="attr">position</span>: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line"><span class="attr">formatter</span>: <span class="string">&#x27;最大值&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;最高点&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> echar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML背景图片补全</title>
      <link href="/2020/10/21/HTML%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%A1%A5%E5%85%A8/"/>
      <url>/2020/10/21/HTML%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%A1%A5%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>背景图片补全<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.background</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://i.loli.net/2020/10/21/Vy3Wm4wYHZhO6ib.jpg</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.background</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">z-index</span>: -<span class="number">2</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">transition</span>: all .<span class="number">3s</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css"><span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css"><span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;background&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询mysql重复数据</title>
      <link href="/2020/10/21/%E6%9F%A5%E8%AF%A2mysql%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/10/21/%E6%9F%A5%E8%AF%A2mysql%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>查找除id外其他部分完全相同的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 a <span class="keyword">WHERE</span> (a.字段名<span class="number">1</span>,a.字段名<span class="number">2</span>,a.字段名<span class="number">3</span>,a.字段名n) <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">) <span class="keyword">AND</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(id) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>删除相同数据方法（注意备份！！！！）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> id <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> t.id <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> a.id <span class="keyword">FROM</span> 表名 a <span class="keyword">WHERE</span> (a.字段名<span class="number">1</span>,a.字段名<span class="number">2</span>,a.字段名<span class="number">3</span>,a.字段名n) <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">) <span class="keyword">AND</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(id) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>,字段名n <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">))t );</span><br></pre></td></tr></table></figure><p><strong>注：从X表中查询返还的结果给where后再删除X表中的数据会报错</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">&#x27;t specify target table &#x27;</span>表名<span class="string">&#x27; for update in FROM clause</span></span><br></pre></td></tr></table></figure><p><strong>解决：将查询结果作为临时表来返回。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript——ajax异步请求不能传递参数解决办法</title>
      <link href="/2020/10/20/javascript_ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E4%B8%8D%E8%83%BD%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/10/20/javascript_ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E4%B8%8D%E8%83%BD%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>ajax是异步请求不能将内部参数传出来，在ajax里加上一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">async: false,</span><br></pre></td></tr></table></figure><p>变成同步请求，在return参数就好了</p><h4 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个 ECharts 实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 引入 echarts.js  -moz-background-size:100% 100%;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 95%;height:700px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> xxx=[]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> y1=[]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> y2=[]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> t=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">$.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">url</span>:<span class="string">&quot;http://xh.3xdzy.cn:3000/?city=三亚&amp;date=2020-10-10&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//data: cityid,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">async</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">contentType</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">y1=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;y&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">y2=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;2&#x27;</span>][<span class="string">&#x27;y&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">xxx=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;x&#x27;</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//console.log(xxx)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> xxx,y1,y2</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//console.log(t)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(xxx)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(y1)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(y2)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 指定图表的配置项和数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> option = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">text</span>: <span class="string">&#x27;呼和浩特——三亚 2020-10-21 机票最低价格走势&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="comment">//subtext: &#x27;纯属虚构&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">tooltip</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">legend</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">data</span>: [<span class="string">&#x27;呼和浩特——&gt;三亚&#x27;</span>, <span class="string">&#x27;三亚——&gt;呼和浩特&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">toolbox</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">show</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">feature</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">dataZoom</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">yAxisIndex</span>: <span class="string">&#x27;none&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">dataView</span>: &#123;<span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">magicType</span>: &#123;<span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">restore</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">saveAsImage</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">data</span>: xxx</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">yAxis</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">series</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">name</span>: <span class="string">&#x27;呼和浩特——&gt;三亚&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">data</span>: y1,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">markPoint</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">data</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#123;<span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#123;<span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">markLine</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">data</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#123;<span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">name</span>: <span class="string">&#x27;三亚——&gt;呼和浩特&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">data</span>: y2,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">markPoint</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">data</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#123;<span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#123;<span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">markLine</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">data</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#123;<span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                [&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">symbol</span>: <span class="string">&#x27;none&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">x</span>: <span class="string">&#x27;90%&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">yAxis</span>: <span class="string">&#x27;max&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#125;, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">symbol</span>: <span class="string">&#x27;circle&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">label</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                        <span class="attr">position</span>: <span class="string">&#x27;start&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                        <span class="attr">formatter</span>: <span class="string">&#x27;最大值&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                    <span class="attr">name</span>: <span class="string">&#x27;最高点&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                                &#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        myChart.setOption(option);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> echar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python——pymysql用法</title>
      <link href="/2020/10/19/Python_pymysql%E7%94%A8%E6%B3%95/"/>
      <url>/2020/10/19/Python_pymysql%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="建立表"><a href="#建立表" class="headerlink" title="建立表"></a>建立表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 打开数据库连接</span><br><span class="line">db <span class="operator">=</span> pymysql.connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;,&quot;databasename&quot; )</span><br><span class="line"></span><br><span class="line"># 使用 <span class="keyword">cursor</span>() 方法创建一个游标对象 <span class="keyword">cursor</span></span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> db.cursor()</span><br><span class="line"></span><br><span class="line"># 使用 <span class="keyword">execute</span>() 方法执行 <span class="keyword">SQL</span>，如果表存在则删除</span><br><span class="line">cursor.execute(&quot;DROP TABLE IF EXISTS tablename&quot;)</span><br><span class="line"></span><br><span class="line"># 使用预处理语句创建表</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;&quot;&quot;CREATE TABLE tablename (</span><br><span class="line">         FIRST_NAME  CHAR(20) NOT NULL,</span><br><span class="line">         LAST_NAME  CHAR(20),</span><br><span class="line">         AGE INT,</span><br><span class="line">         SEX CHAR(1),</span><br><span class="line">         INCOME FLOAT )&quot;&quot;&quot;</span><br><span class="line">cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line"></span><br><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h1 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db <span class="operator">=</span> pymysql.connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;,&quot;database&quot; )</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> db.cursor()</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;&quot;&quot;INSERT INTO tablename(FIRST_NAME,</span><br><span class="line">         LAST_NAME, AGE, SEX, INCOME)</span><br><span class="line">         VALUES (&#x27;Mac&#x27;, &#x27;Mohan&#x27;, 20, &#x27;M&#x27;, 2000)&quot;&quot;&quot;</span><br><span class="line">try:</span><br><span class="line">   cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db <span class="operator">=</span> pymysql.connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;,&quot;database&quot; )</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> db.cursor()</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;INSERT INTO tablename(FIRST_NAME, \</span><br><span class="line">       LAST_NAME, AGE, SEX, INCOME) \</span><br><span class="line">       VALUES (&#x27;%s&#x27;, &#x27;%s&#x27;,  %s,  &#x27;%s&#x27;,  %s)&quot; <span class="operator">%</span> \</span><br><span class="line">       (<span class="string">&#x27;Mac&#x27;</span>, <span class="string">&#x27;Mohan&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">try:</span><br><span class="line">   cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db <span class="operator">=</span> pymysql.connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;,&quot;database&quot; )</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> db.cursor()</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM tablename WHERE INCOME &gt; %s&quot; <span class="operator">%</span> (<span class="number">1000</span>)</span><br><span class="line">try:</span><br><span class="line">   cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line">   # 获取所有记录列表</span><br><span class="line">   results <span class="operator">=</span> cursor.fetchall()</span><br><span class="line">   <span class="keyword">for</span> <span class="type">row</span> <span class="keyword">in</span> results:</span><br><span class="line">      fname <span class="operator">=</span> <span class="type">row</span>[<span class="number">0</span>]</span><br><span class="line">      lname <span class="operator">=</span> <span class="type">row</span>[<span class="number">1</span>]</span><br><span class="line">      age <span class="operator">=</span> <span class="type">row</span>[<span class="number">2</span>]</span><br><span class="line">      sex <span class="operator">=</span> <span class="type">row</span>[<span class="number">3</span>]</span><br><span class="line">      income <span class="operator">=</span> <span class="type">row</span>[<span class="number">4</span>]</span><br><span class="line">       # 打印结果</span><br><span class="line">      print (&quot;fname=%s,lname=%s,age=%s,sex=%s,income=%s&quot; <span class="operator">%</span> \</span><br><span class="line">             (fname, lname, age, sex, income ))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   print (&quot;Error: unable to fetch data&quot;)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h1 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db <span class="operator">=</span> pymysql.connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;,&quot;database&quot; )</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> db.cursor()</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;UPDATE tablename SET AGE = AGE + 1 WHERE SEX = &#x27;%c&#x27;&quot; <span class="operator">%</span> (<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">try:</span><br><span class="line">   cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db <span class="operator">=</span> pymysql.connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;,&quot;database&quot; )</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> db.cursor()</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;DELETE FROM tablename WHERE AGE &gt; %s&quot; <span class="operator">%</span> (<span class="number">20</span>)</span><br><span class="line">try:</span><br><span class="line">   cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS命令——systeminfo</title>
      <link href="/2020/10/19/DOS%E5%91%BD%E4%BB%A4_systeminfo/"/>
      <url>/2020/10/19/DOS%E5%91%BD%E4%BB%A4_systeminfo/</url>
      
        <content type="html"><![CDATA[<p>该命令是Windows中用于显示关于计算机及其操作系统的详细配置信息，包括操作系统配置、安全信息、产品 ID 和硬件属性，如 RAM、磁盘空间和网卡和补丁信息等。</p><p><strong>结果截图</strong></p><p><img src="/img/uploads/2020/10/1440706996.png" alt="1"><br><img src="/img/uploads/2020/10/495846609.png" alt="2"></p><p><strong>systeminfo命令详解</strong></p><p>SYSTEMINFO [/S system [/U username [/P [password]]]] [/FO format] [/NH]</p><p><strong>描述:</strong></p><p>这个命令行工具允许管理员查询基本系统配置信息。</p><p>参数列表:</p><table><thead><tr><th>参数</th><th>参数值</th><th>效果</th></tr></thead><tbody><tr><td>/S</td><td>system</td><td>指定连接到的远程系统。</td></tr><tr><td>/U</td><td>[domain]user</td><td>指定应该在哪个用户上下文执行命令。</td></tr><tr><td>/P</td><td>[password]</td><td>为提供的用户上下文指定密码。</td></tr><tr><td>/FO</td><td>format</td><td>指定显示结果的格式。有效值: “TABLE”、”LIST”、”CSV”。</td></tr><tr><td>/NH</td><td></td><td>指定 “Column Header” 不应该在结果中显示。只对 TABLE 和 CSV 格式有效。</td></tr><tr><td>/?</td><td></td><td>显示帮助/用法。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令大全</title>
      <link href="/2020/10/18/Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/10/18/Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h1><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p><strong>描述：</strong></p><p>创建一个新的容器并运行一个命令</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-a stdin</td><td>指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</td></tr><tr><td>-d</td><td>后台运行容器，并返回容器ID；</td></tr><tr><td>-i</td><td>以交互模式运行容器，通常与 -t 同时使用；</td></tr><tr><td>-P</td><td>随机端口映射，容器内部端口随机映射到主机的端口</td></tr><tr><td>-p</td><td>指定端口映射，格式为：主机(宿主)端口:容器端口</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</td></tr><tr><td>–name=”nginx-lb”</td><td>为容器指定一个名称；</td></tr><tr><td>–dns 8.8.8.8</td><td>指定容器使用的DNS服务器，默认和宿主一致；</td></tr><tr><td>–dns-search example.com</td><td>指定容器DNS搜索域名，默认和宿主一致；</td></tr><tr><td>-h “mars”</td><td>指定容器的hostname；</td></tr><tr><td>-e username=”ritchie”</td><td>设置环境变量；</td></tr><tr><td>–env-file=[]</td><td>从指定文件读入环境变量；</td></tr><tr><td>–cpuset=”0-2” or –cpuset=”0,1,2”</td><td>绑定容器到指定CPU运行；</td></tr><tr><td>-m</td><td>设置容器使用内存最大值；</td></tr><tr><td>–net=”bridge”</td><td>指定容器的网络连接类型，支持 bridge/host/none/container：四种类型；</td></tr><tr><td>–link=[]</td><td>添加链接到另一个容器；</td></tr><tr><td>–expose=[]</td><td>开放一个端口或一组端口；</td></tr><tr><td>–volume , -v</td><td>绑定一个卷</td></tr></tbody></table><p><strong>实例</strong></p><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure><p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</span><br></pre></td></tr></table></figure><p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker run -it nginx:latest /bin/bash</span><br><span class="line">root@b8573233d675:/# </span><br></pre></td></tr></table></figure><h2 id="start-stop-restart"><a href="#start-stop-restart" class="headerlink" title="start/stop/restart"></a>start/stop/restart</h2><p><strong>描述</strong></p><p>docker start :启动一个或多个已经被停止的容器<br>docker stop :停止一个运行中的容器<br>docker restart :重启容器</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>启动已被停止的容器myshuimo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start myshuimo</span><br></pre></td></tr></table></figure><p>停止运行中的容器myshuimo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop myshuimo</span><br></pre></td></tr></table></figure><p>重启容器myshuimo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart myshuimo</span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p><strong>描述</strong></p><p>docker kill :杀掉一个运行中的容器。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-s</td><td>向容器发送一个信号</td></tr></tbody></table><p><strong>实例</strong></p><p>杀掉运行中的容器mynginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker kill -s KILL mynginx</span><br><span class="line">mynginx</span><br></pre></td></tr></table></figure><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p><strong>描述</strong></p><p>docker rm ：删除一个或多个容器。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-f</td><td>通过 SIGKILL 信号强制删除一个运行中的容器。</td></tr><tr><td>-l</td><td>移除容器间的网络连接，而非容器本身。</td></tr><tr><td>-v</td><td>删除与容器关联的卷。</td></tr></tbody></table><p><strong>实例</strong></p><p>强制删除容器 db01、db02：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f db01 db02</span><br></pre></td></tr></table></figure><p>移除容器 nginx01 对容器 db01 的连接，连接名 db：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -l db</span><br></pre></td></tr></table></figure><p>删除容器 nginx01, 并删除容器挂载的数据卷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v nginx01</span><br></pre></td></tr></table></figure><p>删除所有已经停止的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h2 id="pause-unpause"><a href="#pause-unpause" class="headerlink" title="pause/unpause"></a>pause/unpause</h2><p><strong>描述</strong></p><p>docker pause :暂停容器中所有的进程。<br>docker unpause :恢复容器中所有的进程。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>暂停数据库容器db01提供服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause db01</span><br></pre></td></tr></table></figure><p>恢复数据库容器db01提供服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause db01</span><br></pre></td></tr></table></figure><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p><strong>描述</strong></p><p>docker create ：创建一个新的容器但不启动它</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>使用docker镜像nginx:latest创建一个容器,并将容器命名为myshuimo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker create  --name myshuimo  nginx:latest</span><br><span class="line">09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f</span><br></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p><strong>描述</strong></p><p>docker exec ：在运行的容器中执行命令</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-d</td><td>分离模式: 在后台运行</td></tr><tr><td>-i</td><td>即使没有附加也保持STDIN 打开</td></tr><tr><td>-t</td><td>分配一个伪终端</td></tr></tbody></table><p><strong>实例</strong></p><p>在容器 mynginx 中以交互模式执行容器内 /root/shuimo.sh 脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker exec -it mynginx /bin/sh /root/shuimo.sh</span><br><span class="line">http://www.shuimo.com/</span><br></pre></td></tr></table></figure><p>在容器 mynginx 中开启一个交互模式的终端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker exec -i -t  mynginx /bin/bash</span><br><span class="line">root@b1a0703e41e7:/#</span><br></pre></td></tr></table></figure><p>也可以通过 docker ps -a 命令查看已经在运行的容器，然后使用容器 ID 进入容器。</p><p>查看已经在运行的容器 ID：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker ps -a </span><br><span class="line">...</span><br><span class="line">9df70f9a0714        openjdk             &quot;/usercode/script.sh…&quot; </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第一列的 9df70f9a0714 就是容器 ID。</p><p>通过 exec 命令对指定的容器执行 bash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker exec -it 9df70f9a0714 /bin/bash</span><br></pre></td></tr></table></figure><p><strong>注：有的镜像中没有bash改用/bin/sh</strong></p><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><strong>描述</strong></p><p>docker ps : 列出容器</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-a</td><td>显示所有的容器，包括未运行的。</td></tr><tr><td>-f</td><td>根据条件过滤显示的内容。</td></tr><tr><td>–format</td><td>指定返回值的模板文件。</td></tr><tr><td>-l</td><td>显示最近创建的容器。</td></tr><tr><td>-n</td><td>列出最近创建的n个容器。</td></tr><tr><td>–no-trunc</td><td>不截断输出。</td></tr><tr><td>-q</td><td>静默模式，只显示容器编号。</td></tr><tr><td>-s</td><td>显示总的文件大小。</td></tr></tbody></table><p><strong>实例</strong></p><p>列出所有在运行的容器信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES</span><br><span class="line">09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp          myshuimo</span><br><span class="line">96f7f14e99ab   mysql:5.6      &quot;docker-entrypoint.sh&quot; ...  0.0.0.0:3306-&gt;3306/tcp   mymysql</span><br></pre></td></tr></table></figure><p>输出详情介绍：<br>CONTAINER ID: 容器 ID。<br>IMAGE: 使用的镜像。<br>COMMAND: 启动容器时运行的命令。<br>CREATED: 容器的创建时间。<br>STATUS: 容器状态。<br>状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><p>PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。<br>NAMES: 自动分配的容器名称。<br>列出最近创建的5个容器信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker ps -n 5</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                   CREATED</span><br><span class="line">09b93464c2f7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...</span><br><span class="line">b8573233d675        nginx:latest        &quot;/bin/bash&quot;               2 days ago   ...</span><br><span class="line">b1a0703e41e7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...</span><br><span class="line">f46fb1dec520        5c6e1090e771        &quot;/bin/sh -c &#x27;set -x \t&quot;   2 days ago   ...</span><br><span class="line">a63b4a5597de        860c279d2fec        &quot;bash&quot;                    2 days ago   ...</span><br></pre></td></tr></table></figure><p>列出所有创建的容器ID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker ps -a -q</span><br><span class="line">09b93464c2f7</span><br><span class="line">b8573233d675</span><br><span class="line">b1a0703e41e7</span><br><span class="line">f46fb1dec520</span><br><span class="line">a63b4a5597de</span><br><span class="line">6a4aa42e947b</span><br><span class="line">de7bb36e7968</span><br><span class="line">43a432b73776</span><br><span class="line">664a8ab1a585</span><br><span class="line">ba52eb632bbd</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h2><p><strong>描述</strong></p><p>docker inspect : 获取容器/镜像的元数据。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-f</td><td>指定返回值的模板文件。</td></tr><tr><td>-s</td><td>显示总的文件大小。</td></tr><tr><td>–type</td><td>为指定类型返回JSON。</td></tr></tbody></table><p><strong>实例</strong></p><p>获取镜像mysql:5.6的元信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker inspect mysql:5.6</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;mysql:5.6&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2016-05-24T04:01:41.168371815Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;b0cf605c7757&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;3306/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>获取正在运行的容器mymysql的 IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mymysql</span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p><strong>描述</strong></p><p>docker top :查看容器中运行的进程信息，支持 ps 命令参数。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br></pre></td></tr></table></figure><p>容器运行时不一定有/bin/bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。</p><p><strong>实例</strong></p><p>查看容器mymysql的进程信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~/mysql$ docker top mymysql</span><br><span class="line">UID    PID    PPID    C      STIME   TTY  TIME       CMD</span><br><span class="line">999    40347  40331   18     00:58   ?    00:00:02   mysqld</span><br></pre></td></tr></table></figure><p>查看所有运行容器的进程信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \ &amp;&amp;docker top $i; done</span><br></pre></td></tr></table></figure><h2 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h2><p><strong>描述</strong></p><p>docker attach :连接到正在运行中的容器。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。<br>官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。</p><p><strong>实例</strong></p><p>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker attach --sig-proxy=false mynginx</span><br><span class="line">192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><p><strong>描述</strong></p><p>docker events : 从服务器获取实时事件</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker events [OPTIONS]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-f</td><td>根据条件过滤事件；</td></tr><tr><td>–since</td><td>从指定的时间戳后显示所有事件；</td></tr><tr><td>–until</td><td>流水时间显示到指定的时间为止；</td></tr></tbody></table><p><strong>实例</strong></p><p>显示docker 2016年7月1日后的所有事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~/mysql$ docker events  --since=&quot;1467302400&quot;</span><br><span class="line">2016-07-08T19:44:54.501277677+08:00 network connect 66f958fd13dc4314ad20034e576d5c5eba72e0849dcc38ad9e8436314a4149d4 (container=b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64, name=bridge, type=bridge)</span><br><span class="line">2016-07-08T19:44:54.723876221+08:00 container start b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (image=nginx:latest, name=elegant_albattani)</span><br><span class="line">2016-07-08T19:44:54.726110498+08:00 container resize b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (height=39, image=nginx:latest, name=elegant_albattani, width=167)</span><br><span class="line">2016-07-08T19:46:22.137250899+08:00 container die b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (exitCode=0, image=nginx:latest, name=elegant_albattani)</span><br><span class="line">...</span><br><span class="line">显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</span><br><span class="line"></span><br><span class="line">shuimo@shuimo:~/mysql$ docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; </span><br><span class="line">2016-07-11T00:38:53.975174837+08:00 container start 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:51:17.022572452+08:00 container kill 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql, signal=9)</span><br><span class="line">2016-07-11T00:51:17.132532080+08:00 container die 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (exitCode=137, image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:51:17.514661357+08:00 container destroy 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:57:18.551984549+08:00 container create c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:57:18.557405864+08:00 container attach c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:57:18.844134112+08:00 container start c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:57:19.140141428+08:00 container die c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (exitCode=1, image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:58:05.941019136+08:00 container destroy c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:58:07.965128417+08:00 container create a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:58:08.188734598+08:00 container start a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T00:58:20.010876777+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)</span><br><span class="line">2016-07-11T01:06:01.395365098+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)</span><br></pre></td></tr></table></figure><p>如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如–since=”2016-07-01”。</p><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><p><strong>描述</strong></p><p>docker logs : 获取容器的日志</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-f</td><td>跟踪日志输出</td></tr><tr><td>–since</td><td>显示某个开始时间的所有日志</td></tr><tr><td>-t</td><td>显示时间戳</td></tr><tr><td>–tail</td><td>仅列出最新N条容器日志</td></tr></tbody></table><p><strong>实例</strong></p><p>跟踪查看容器mynginx的日志输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker logs -f mynginx</span><br><span class="line">192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">2016/07/10 16:53:33 [error] 5#5: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;192.168.239.130&quot;, referrer: &quot;http://192.168.239.130/&quot;</span><br><span class="line">192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://192.168.239.130/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">192.168.239.1 - - [10/Jul/2016:16:53:59 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看容器mynginx从2016年7月1日后的最新10条日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx</span><br></pre></td></tr></table></figure><h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p><strong>描述</strong></p><p>docker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait CONTAINER</span><br></pre></td></tr></table></figure><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p><strong>描述</strong></p><p>docker export :将文件系统作为一个tar归档文件导出到STDOUT。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-o</td><td>将输入内容写到文件。</td></tr></tbody></table><p><strong>实例</strong></p><p>将id为a404c6c174a2的容器按日期保存为tar文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2</span><br><span class="line">shuimo@shuimo:~$ ls mysql-`date +%Y%m%d`.tar</span><br><span class="line">mysql-20160711.tar</span><br></pre></td></tr></table></figure><h2 id="port"><a href="#port" class="headerlink" title="port"></a>port</h2><p><strong>描述</strong></p><p>docker port :列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</span><br></pre></td></tr></table></figure><p><strong>实例</strong><br>查看容器mynginx的端口映射情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker port mymysql</span><br><span class="line">3306/tcp -&gt; 0.0.0.0:3306</span><br></pre></td></tr></table></figure><h1 id="容器rootfs命令"><a href="#容器rootfs命令" class="headerlink" title="容器rootfs命令"></a>容器rootfs命令</h1><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p><strong>描述</strong></p><p>docker commit :从容器创建一个新的镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-a</td><td>提交的镜像作者；</td></tr><tr><td>-c</td><td>使用Dockerfile指令来创建镜像；</td></tr><tr><td>-m</td><td>提交时的说明文字；</td></tr><tr><td>-p</td><td>在commit时，将容器暂停。</td></tr></tbody></table><p><strong>实例</strong></p><p>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker commit -a &quot;shuimo.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1 </span><br><span class="line">sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057</span><br><span class="line">shuimo@shuimo:~$ docker images mymysql:v1</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mymysql             v1                  37af1236adef        15 seconds ago      329 MB</span><br></pre></td></tr></table></figure><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p><strong>描述</strong></p><p>docker cp :用于容器与主机之间的数据拷贝。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-L</td><td>保持源目标中的链接</td></tr></tbody></table><p><strong>实例</strong></p><p>将主机/www/shuimo目录拷贝到容器96f7f14e99ab的/www目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /www/shuimo 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure><p>将主机/www/shuimo目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /www/shuimo 96f7f14e99ab:/www</span><br></pre></td></tr></table></figure><p>将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p><strong>描述</strong></p><p>docker diff : 检查容器里文件结构的更改。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>查看容器mymysql的文件结构更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shuimo@shuimo:~$ docker diff mymysql</span><br><span class="line">A /logs</span><br><span class="line">A /mysql_data</span><br><span class="line">C /run</span><br><span class="line">C /run/mysqld</span><br><span class="line">A /run/mysqld/mysqld.pid</span><br><span class="line">A /run/mysqld/mysqld.sock</span><br><span class="line">C /tmp</span><br></pre></td></tr></table></figure><h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><h2 id="login-logout"><a href="#login-logout" class="headerlink" title="login/logout"></a>login/logout</h2><p><strong>描述</strong></p><p>docker login : 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><p>docker logout : 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line">docker logout [OPTIONS] [SERVER]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-u</td><td>登陆的用户名</td></tr><tr><td>-p</td><td>登陆的密码</td></tr></tbody></table><p><strong>实例</strong></p><p>登陆到Docker Hub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><p>登出Docker Hub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p><strong>描述</strong></p><p>docker pull : 从镜像仓库中拉取或者更新指定镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-a</td><td>拉取所有 tagged 镜像</td></tr><tr><td>–disable-content-trust</td><td>忽略镜像的校验,默认开启</td></tr></tbody></table><p><strong>实例</strong></p><p>从Docker Hub下载java最新版镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java</span><br></pre></td></tr></table></figure><p>从Docker Hub下载REPOSITORY为java的所有镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull -a java</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p><strong>描述</strong></p><p>docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>–disable-content-trust</td><td>忽略镜像的校验,默认开启</td></tr></tbody></table><p><strong>实例</strong></p><p>上传本地镜像 myapache:v1 到镜像仓库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push myapache:v1</span><br></pre></td></tr></table></figure><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p><strong>描述</strong></p><p>docker search : 从Docker Hub查找镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>–automated</td><td>只列出 automated build类型的镜像</td></tr><tr><td>–no-trunc</td><td>显示完整的镜像描述</td></tr><tr><td>-s</td><td>列出收藏数不小于指定值的镜像</td></tr></tbody></table><p><strong>实例</strong></p><p>从Docker Hub查找所有镜像名包含java，并且收藏数大于10的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker search -s 10 java</span><br><span class="line">NAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATED</span><br><span class="line">java                  Java is a concurrent, class-based...   1037    [OK]       </span><br><span class="line">anapsix/alpine-java   Oracle Java 8 (and 7) with GLIBC ...   115                [OK]</span><br><span class="line">develar/java                                                 46                 [OK]</span><br><span class="line">isuper/java-oracle    This repository contains all java...   38                 [OK]</span><br><span class="line">lwieske/java-8        Oracle Java 8 Container - Full + ...   27                 [OK]</span><br><span class="line">nimmis/java-centos    This is docker images of CentOS 7...   13                 [OK]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>NAME: 镜像仓库源的名称</li><li>DESCRIPTION: 镜像的描述</li><li>OFFICIAL: 是否 docker 官方发布</li><li>stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li><li>AUTOMATED: 自动构建。</li></ul><h1 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h1><h2 id="images"><a href="#images" class="headerlink" title="images"></a>images</h2><p><strong>描述</strong></p><p>docker images : 列出本地镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-a</td><td>列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）</td></tr><tr><td>–digests</td><td>显示镜像的摘要信息</td></tr><tr><td>-f</td><td>显示满足条件的镜像</td></tr><tr><td>–format</td><td>指定返回值的模板文件</td></tr><tr><td>–no-trunc</td><td>显示完整的镜像信息</td></tr><tr><td>-q</td><td>只显示镜像ID</td></tr></tbody></table><p><strong>实例</strong></p><p>查看本地镜像列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker images</span><br><span class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mymysql                 v1                  37af1236adef        5 minutes ago       329 MB</span><br><span class="line">runoob/ubuntu           v4                  1c06aa18edee        2 days ago          142.1 MB</span><br><span class="line">&lt;none&gt;                  &lt;none&gt;              5c6e1090e771        2 days ago          165.9 MB</span><br><span class="line">httpd                   latest              ed38aaffef30        11 days ago         195.1 MB</span><br><span class="line">alpine                  latest              4e38e38c8ce0        2 weeks ago         4.799 MB</span><br><span class="line">mongo                   3.2                 282fd552add6        3 weeks ago         336.1 MB</span><br><span class="line">redis                   latest              4465e4bcad80        3 weeks ago         185.7 MB</span><br><span class="line">php                     5.6-fpm             025041cd3aa5        3 weeks ago         456.3 MB</span><br><span class="line">python                  3.5                 045767ddf24a        3 weeks ago         684.1 MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>列出本地镜像中REPOSITORY为ubuntu的镜像列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@runoob:~# docker images  ubuntu</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              14.04               90d5884b1ee0        9 weeks ago         188 MB</span><br><span class="line">ubuntu              15.10               4e3b13c8a266        3 months ago        136.3 MB</span><br></pre></td></tr></table></figure><h2 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h2><p><strong>描述</strong></p><p>docker rmi : 删除本地一个或多少镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-f</td><td>强制删除</td></tr><tr><td>–no-prune</td><td>不移除该镜像的过程镜像，默认移除</td></tr></tbody></table><p><strong>实例</strong></p><p>强制删除本地镜像 runoob/ubuntu:v4 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@runoob:~# docker rmi -f runoob/ubuntu:v4</span><br><span class="line">Untagged: runoob/ubuntu:v4</span><br><span class="line">Deleted: sha256:1c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072be</span><br><span class="line">Deleted: sha256:85feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73</span><br></pre></td></tr></table></figure><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p><strong>描述</strong></p><p>docker tag : 标记本地镜像，将其归入某一仓库。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@runoob:~# docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br><span class="line">root@runoob:~# docker images   runoob/ubuntu:v3</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/ubuntu       v3                  4e3b13c8a266        3 months ago        136.3 MB</span><br></pre></td></tr></table></figure><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p><strong>描述</strong></p><p>docker build 命令用于使用 Dockerfile 创建镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>–build-arg=[]</td><td>设置镜像创建时的变量；</td></tr><tr><td>–cpu-shares</td><td>设置 cpu 使用权重；</td></tr><tr><td>–cpu-period</td><td>限制 CPU CFS周期；</td></tr><tr><td>–cpu-quota</td><td>限制 CPU CFS配额；</td></tr><tr><td>–cpuset-cpus</td><td>指定使用的CPU id；</td></tr><tr><td>–cpuset-mems</td><td>指定使用的内存 id；</td></tr><tr><td>–disable-content-trust</td><td>忽略校验，默认开启；</td></tr><tr><td>-f</td><td>指定要使用的Dockerfile路径；</td></tr><tr><td>–force-rm</td><td>设置镜像过程中删除中间容器；</td></tr><tr><td>–isolation</td><td>使用容器隔离技术；</td></tr><tr><td>–label=[]</td><td>设置镜像使用的元数据；</td></tr><tr><td>-m</td><td>设置内存最大值；</td></tr><tr><td>–memory-swap</td><td>设置Swap的最大值为内存+swap，”-1”表示不限swap；</td></tr><tr><td>–no-cache</td><td>创建镜像的过程不使用缓存；</td></tr><tr><td>–pull</td><td>尝试去更新镜像的新版本；</td></tr><tr><td>–quiet, -q</td><td>安静模式，成功后只输出镜像 ID；</td></tr><tr><td>–rm</td><td>设置镜像成功后删除中间容器；</td></tr><tr><td>–shm-size</td><td>设置/dev/shm的大小，默认值是64M；</td></tr><tr><td>–ulimit</td><td>Ulimit配置。</td></tr><tr><td>–tag, -t</td><td>镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</td></tr><tr><td>–network</td><td>默认 default。在构建期间设置RUN指令的网络模式</td></tr></tbody></table><p><strong>实例</strong></p><p>使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/ubuntu:v1 . </span><br></pre></td></tr></table></figure><p>使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure><p>也可以通过 -f Dockerfile 文件的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure><p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t test/myapp .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p><strong>描述</strong></p><p>docker history : 查看指定镜像的创建历史。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [OPTIONS] IMAGE</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-H</td><td>以可读的格式打印镜像大小和日期，默认为true</td></tr><tr><td>–no-trunc</td><td>显示完整的提交记录</td></tr><tr><td>-q</td><td>仅列出提交记录ID</td></tr></tbody></table><p><strong>实例</strong></p><p>查看本地镜像runoob/ubuntu :v3的创建历史。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@runoob:~# docker history runoob/ubuntu:v3</span><br><span class="line">IMAGE             CREATED           CREATED BY                                      SIZE      COMMENT</span><br><span class="line">4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;]             0 B</span><br><span class="line">&lt;missing&gt;         3 months ago      /bin/sh -c sed -i &#x27;s/^#\s*\(deb.*universe\)$/   1.863 kB</span><br><span class="line">&lt;missing&gt;         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /u   701 B</span><br><span class="line">&lt;missing&gt;         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB</span><br></pre></td></tr></table></figure><h2 id="save"><a href="#save" class="headerlink" title="save"></a>save</h2><p><strong>描述</strong></p><p>docker save : 将指定镜像保存成 tar 归档文件。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-o</td><td>输出到的文件</td></tr></tbody></table><p><strong>实例</strong></p><p>将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class="line">runoob@runoob:~$ ll my_ubuntu_v3.tar</span><br><span class="line">-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta</span><br></pre></td></tr></table></figure><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p><strong>描述</strong></p><p>docker load : 导入使用 docker save 命令导出的镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load [OPTIONS]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>–input , -i</td><td>指定导入的文件，代替 STDIN</td></tr><tr><td>–quiet , -q</td><td>精简输出信息</td></tr></tbody></table><p><strong>实例</strong></p><p>导入镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"></span><br><span class="line">$ docker load &lt; busybox.tar.gz</span><br><span class="line"></span><br><span class="line">Loaded image: busybox:latest</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             latest              769b9341d937        7 weeks ago         2.489 MB</span><br><span class="line"></span><br><span class="line">$ docker load --input fedora.tar</span><br><span class="line"></span><br><span class="line">Loaded image: fedora:rawhide</span><br><span class="line"></span><br><span class="line">Loaded image: fedora:20</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             latest              769b9341d937        7 weeks ago         2.489 MB</span><br><span class="line">fedora              rawhide             0d20aec6529d        7 weeks ago         387 MB</span><br><span class="line">fedora              20                  58394af37342        7 weeks ago         385.5 MB</span><br><span class="line">fedora              heisenbug           58394af37342        7 weeks ago         385.5 MB</span><br><span class="line">fedora              latest              58394af37342        7 weeks ago         385.5 MB</span><br></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p><strong>描述</strong></p><p>docker import : 从归档文件中创建镜像。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-c</td><td>应用docker 指令创建镜像</td></tr><tr><td>-m</td><td>提交时的说明文字</td></tr></tbody></table><p><strong>实例</strong></p><p>从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob/ubuntu:v4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  </span><br><span class="line">sha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39</span><br><span class="line">runoob@runoob:~$ docker images runoob/ubuntu:v4</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB</span><br></pre></td></tr></table></figure><h1 id="info-version"><a href="#info-version" class="headerlink" title="info|version"></a>info|version</h1><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><p><strong>描述</strong></p><p>docker info : 显示 Docker 系统信息，包括镜像和容器数。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info [OPTIONS]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>查看docker系统信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Containers: 12</span><br><span class="line">Images: 41</span><br><span class="line">Storage Driver: aufs</span><br><span class="line"> Root Dir: /var/lib/docker/aufs</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Dirs: 66</span><br><span class="line"> Dirperm1 Supported: false</span><br><span class="line">Execution Driver: native-0.2</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Kernel Version: 3.13.0-32-generic</span><br><span class="line">Operating System: Ubuntu 14.04.1 LTS</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 1.954 GiB</span><br><span class="line">Name: iZ23mtq8bs1Z</span><br><span class="line">ID: M5N4:K6WN:PUNC:73ZN:AONJ:AUHL:KSYH:2JPI:CH3K:O4MK:6OCX:5OYW</span><br></pre></td></tr></table></figure><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p><strong>描述</strong></p><p>docker version :显示 Docker 版本信息。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version [OPTIONS]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>效果描述</th></tr></thead><tbody><tr><td>-f</td><td>指定返回值的模板文件</td></tr></tbody></table><p><strong>实例</strong></p><p>显示 Docker 版本信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      1.8.2</span><br><span class="line"> API version:  1.20</span><br><span class="line"> Go version:   go1.4.2</span><br><span class="line"> Git commit:   0a8c2e3</span><br><span class="line"> Built:        Thu Sep 10 19:19:00 UTC 2015</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      1.8.2</span><br><span class="line"> API version:  1.20</span><br><span class="line"> Go version:   go1.4.2</span><br><span class="line"> Git commit:   0a8c2e3</span><br><span class="line"> Built:        Thu Sep 10 19:19:00 UTC 2015</span><br><span class="line"> OS/Arch:      linux/amd64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《诗经》（国风·邶风·雄雉）</title>
      <link href="/2020/10/16/%E9%9B%84%E9%9B%89/"/>
      <url>/2020/10/16/%E9%9B%84%E9%9B%89/</url>
      
        <content type="html"><![CDATA[<p><strong>原文</strong></p><p><a href="http://121.5.1.207:3000/api/1?rand=27">http://121.5.1.207:3000/api/1?rand=27</a></p><p><a href="http://121.5.1.207:3000/api/1?rand=28">http://121.5.1.207:3000/api/1?rand=28</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">雄雉于飞，泄泄其羽。我之怀矣，自诒伊阻。</span><br><span class="line">雄雉于飞，下上其音。展矣君子，实劳我心。</span><br><span class="line">瞻彼日月，悠悠我思。道之云远，曷云能来？</span><br><span class="line">百尔君子，不知德行。不忮不求，何用不臧。</span><br></pre></td></tr></table></figure><p><strong>译文</strong></p><p>雄雉在空中飞翔，舒展着五彩翅膀。我如此思念夫君，给自己带来忧伤。<br>雄雉在空中飞翔，上下鸣唱声嘹亮。我那诚实的夫君，实让我心劳神伤。<br>看日月迭来迭往，思念是那样悠长。道路相隔真遥远，何时才能回家乡？<br>那些在位君子们，不知我夫德高尚。不贪荣名不贪利，为何让他遭祸殃！</p><p><strong>赏析</strong></p><p>《毛序》说：“《雄雉》，刺卫宣公也。淫乱不恤国事，军旅数起，大夫久役，男女怨旷，国人患之，而作是诗。”说刺卫宣公，诗中没有提及。而“丈夫久役、男女怨旷”点明了诗旨所在，即此诗为妇人思念远役丈夫的诗。方玉润《诗经原始》认为其主题为“期友不归，思而共勖”，也可备一说。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文 </tag>
            
            <tag> 爱情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装VNC</title>
      <link href="/2020/10/16/Linux%E5%AE%89%E8%A3%85VNC/"/>
      <url>/2020/10/16/Linux%E5%AE%89%E8%A3%85VNC/</url>
      
        <content type="html"><![CDATA[<p>检查一下服务器是否已经安装了VNC服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep vnc</span><br></pre></td></tr></table></figure><h4 id="以下命令必须以-root-权限运行。"><a href="#以下命令必须以-root-权限运行。" class="headerlink" title="以下命令必须以 root 权限运行。"></a>以下命令必须以 root 权限运行。</h4><p><strong>首先我们需要安装 X-Window(如果已安装可跳过)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum check-update</span><br><span class="line">yum groupinstall &quot;X Window System&quot;</span><br><span class="line"></span><br><span class="line">yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置默认启动图形界面</span></span></span><br><span class="line">unlink /etc/systemd/system/default.target</span><br><span class="line">ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>在服务器重启之后，我们就有了一个工作着的 CentOS 7 桌面环境了。</p><p><strong>安装 VNC 服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tigervnc-server -y</span><br></pre></td></tr></table></figure><p><strong>配置 VNC</strong></p><p>我们需要在 /etc/systemd/system/ 目录里创建一个配置文件。我们可以将 /lib/systemd/sytem/vncserver@.service 拷贝一份配置文件范例过来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure><p>打开 /etc/systemd/system/vncserver@:1.service ，找到下面这几行，用自己的用户名替换掉 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/sbin/runuser -l &lt;USER&gt; -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class="line">PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid</span><br></pre></td></tr></table></figure><p>假设用户xxx，则替换成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/sbin/runuser -l linoxide -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class="line">PIDFile=/home/linoxide/.vnc/%H%i.pid</span><br></pre></td></tr></table></figure><p>root用户替换成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class="line">PIDFile=/root/.vnc/%H%i.pid</span><br></pre></td></tr></table></figure><p><strong>重载设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>最后设置一下用户的 VNC 密码。要设置某个用户的密码，必须要有能通过 sudo 切换到用户的权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su linoxide</span><br><span class="line">sudo vncpasswd</span><br><span class="line"><span class="meta">#</span><span class="bash">确保你输入的密码多于6个字符</span></span><br></pre></td></tr></table></figure><p><strong>开启服务</strong><br>用下面的命令（永久地）开启服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable vncserver@:1.service</span><br></pre></td></tr></table></figure><p>启动服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure><p><strong>防火墙设置</strong><br>我们需要配置防火墙来让 VNC 服务正常工作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-service vnc-server</span><br><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p><strong>其他命令</strong></p><ul><li>关闭 VNC 服务。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop vncserver@:1.service</span><br></pre></td></tr></table></figure><ul><li>禁止 VNC 服务开机启动。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable vncserver@:1.service</span><br></pre></td></tr></table></figure><ul><li>关闭防火墙。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> VNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask数据库模型</title>
      <link href="/2020/10/16/Flask%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/10/16/Flask%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>SQLAlchemy 是一个基于 Python 实现的 ORM 库，是一种 面对对象 的数据库编程框架 (关系对象映射)。</p><p><strong>快速入门文档</strong><br><a href="http://www.pythondoc.com/flask-sqlalchemy/quickstart.html">http://www.pythondoc.com/flask-sqlalchemy/quickstart.html</a></p><hr><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sqlalchemy</span><br></pre></td></tr></table></figure><p><strong>在 Flask 项目中的 URI 配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">SECRET_KEY =<span class="string">&quot;abc_caonima_wocao&quot;</span> <span class="comment"># 随机 SECRET_KEY</span></span><br><span class="line">SQLALCHEMY_COMMIT_ON_TEARDOWN = <span class="literal">True</span> <span class="comment"># 自动提交</span></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span> <span class="comment"># 自动sql</span></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span> <span class="comment"># debug模式</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql+pymysql://%s:%s@%s:%s/%s&#x27;</span> % (DB_USERNAME, DB_PASSWORD,DB_HOST, DB_PORT, DB_NAME) <span class="comment">#数据库URL</span></span><br></pre></td></tr></table></figure><p><strong>在初始化项目中连接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;templates&#x27;</span>,static_folder=<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure><p>这样就把 数据库 和 Flask实例联系起来了，这里使用 Mysql</p><p><strong>建立数据库模型</strong></p><p>所谓数据库模型，说白了就是建立数据库中所需的具体字段，包括字段名称，类型，限制条件等等</p><p>比如在个人博客中，我们需要有文章列表，也需要有文章详情的数据库模型。</p><p><strong>编写模型对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">__tablename__ = <span class="string">&#x27;article&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">title = db.Column(db.String(<span class="number">32</span>))</span><br><span class="line">author = db.Column(db.String(<span class="number">32</span>))</span><br><span class="line">img_url = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">tag = db.Column(db.String(<span class="number">64</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">uuid = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">create_time = db.Column(db.DateTime, nullable=<span class="literal">True</span>, default=datetime.now)</span><br><span class="line">uid = db.relationship(<span class="string">&#x27;Article_Detail&#x27;</span>, backref=<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;Article %r&gt;&#x27;</span> % self.title</span><br></pre></td></tr></table></figure><p>这样就实现了文章的数据库所需字段<br>id：数据库id，主键<br>title：文章标题，字符类型，后面声明长度<br>author：作者，字符类型<br>img_url：图片，text类型<br>content：文章简介<br>tag：所属标签<br>uuid：文章唯一标识id<br>create_time：创建时间，detatime类型<br>uid：反向代理，通过关联的名称表可以得到 article表中的属性</p><p><strong>Article_Detail模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article_Detail</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">__tablename__ = <span class="string">&#x27;article_detail&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">d_content=db.Column(db.Text,nullable=<span class="literal">False</span>)</span><br><span class="line">uid = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;article.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;Article_Detail %r&gt;&#x27;</span> % self.title</span><br></pre></td></tr></table></figure><p>id：数据库id，主键<br>d_content：详情文章内容，文本类型<br>uid：外键，关联到 article 表 id</p><p>通过 relationship 和 ForeignKey 把文章和文章详情表联系起来，在编写文章详情的时候，通过 uid 选择是哪一篇文章的详情即可。</p><p>对于个人博客而言，模型的关联并没有很复杂，一般是 一对多 的操作就可以搞定，当然如果是论坛或者社区的话，会用到 多对一 和 多对多 的数据库操作 ，不做详细介绍。</p><p><strong>增删改查</strong></p><p>SQLAlchemy  之所以这么流行，在 Flask 中地位如此之高，基于它是面对对象的数据库编程。</p><p>所以，对于数据查询，添加等操作也是非常的简单。</p><p><strong>查询文章列表：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@home.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">init_list= Article.query.order_by(db.desc(Article.create_time)).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;home/index.html&#x27;</span>, datas=init_list)</span><br></pre></td></tr></table></figure><p>可以看到，查询所有文章的语句，这里是按照创建的时间排序的，注意到desc(Article.create_time)，然后将所得列表传给前端页面，渲染完成。</p><p>再来看看根据 id 查询文章详情内容的路由实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@home.route(<span class="params"><span class="string">&#x27;/article/&lt;uuid&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_detail</span>(<span class="params">uuid</span>):</span></span><br><span class="line">base_path = os.path.abspath(<span class="string">&#x27;app/templates/article/&#x27;</span>)</span><br><span class="line">old_file = os.listdir(base_path)[<span class="number">0</span>]</span><br><span class="line">old_path = os.path.join(base_path, old_file)</span><br><span class="line">file_path = os.path.abspath(<span class="string">&#x27;app/templates/article/&#123;&#125;.html&#x27;</span>.<span class="built_in">format</span>(uuid))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">log_v.debug(<span class="string">&quot;[-] File does not exist, renaming !!!&quot;</span>)</span><br><span class="line">os.rename(old_path, file_path)</span><br><span class="line">form = CommentForm()</span><br><span class="line">searchForm = SearchForm()</span><br><span class="line">article_res = Article.query.filter_by(uuid=uuid).first()</span><br><span class="line">article_detail_res = Article_Detail.query.filter_by(uid=article_res.<span class="built_in">id</span>).first()</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;article/&#123;&#125;.html&#x27;</span>.<span class="built_in">format</span>(uuid), a_data=article_res, d_data=article_detail_res, form=form,searchForm=searchForm)</span><br></pre></td></tr></table></figure><p><strong>思路设计：</strong></p><p>在templates模板目录中新建一个article 用于存放文章详情页的html文件，并且索引到这个目录中，在这个目录中只有一个 html 文件，我们只需要向这个html文件填入查询回来的数据即可。</p><p>由于文章列表需要根据文章的 uuid 来跳转到详情页，所以这个 html文件的名称需要 rename 为跳转文章的 uuid，才能正确跳转。</p><p>最后，根据 uuid 查询到文章，再由文章的 id 查询到详情文章内容，渲染到详情页。</p><p>是不是及其简单，所以前期的工作主要是数据库模型字段的设计，还有迁移到数据库中，也就是创建表，让其工作。</p><p><strong>数据库迁移</strong></p><p>使用 flask_migrate 扩展可以非常简单的进行数据库的迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager, Server</span><br><span class="line"></span><br><span class="line">manage = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移</span></span><br><span class="line">Migrate(app,db)</span><br><span class="line">manage.add_command(<span class="string">&#x27;db&#x27;</span>,MigrateCommand)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    manage.run()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">初始化</span></span><br><span class="line"><span class="string">python manage.py db init</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建迁移</span></span><br><span class="line"><span class="string">python manage.py db migrate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">执行迁移</span></span><br><span class="line"><span class="string">python manage.py db upgrade</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>cmd窗口  执行命令  python manage.py db init </p><p>初始化数据库，执行之后会在主 app 目录中生成一个 migrations 目录，里面包含了一些创建的信息，如 版本号 和 操作脚本。</p><p>然后执行  python manage.py db migrate</p><p>迁移数据库，在数据库中真正创建表字段</p><p>最后执行  python manage.py db upgrade  让其生效</p><p>PS：在往后的每一次更改数据库模型中的字段之后，只需要执行后两个命令即可。</p><p><strong>关于数据库回滚</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app,db</span><br><span class="line"><span class="keyword">from</span> app.Logger.logger <span class="keyword">import</span> log_v</span><br><span class="line"><span class="keyword">from</span> app.forms <span class="keyword">import</span> CommentForm, SearchForm</span><br><span class="line"><span class="keyword">from</span> app.tools.getIdAddr <span class="keyword">import</span> getAddr</span><br><span class="line"><span class="keyword">from</span> app.home.home <span class="keyword">import</span> home</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Article, Article_Detail, Global_V, Comment,UserIP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@home.route(<span class="params"><span class="string">&#x27;/postComment/&lt;uuid&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postComment</span>(<span class="params">uuid</span>):</span></span><br><span class="line"><span class="comment"># app.config.update(SECRET_KEY=os.urandom(24))</span></span><br><span class="line"><span class="comment"># log_v.debug(&quot;[*] UPDATE SECRET_KEY&quot;)</span></span><br><span class="line">log_v.debug(<span class="string">&quot;[+] Add Comment&quot;</span>)</span><br><span class="line"></span><br><span class="line">form = CommentForm()</span><br><span class="line"><span class="comment"># 字段必须完整</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span> <span class="keyword">and</span> form.validate_on_submit():</span><br><span class="line">theme = form.theme.data</span><br><span class="line">content = form.content.data</span><br><span class="line">email = form.email.data</span><br><span class="line">csrf_token = form.csrf_token.data</span><br><span class="line">t_md = request.form.get(<span class="string">&quot;t_md&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">all</span>([theme, email, content, csrf_token, t_md]):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">add_comment = Comment(theme=theme, email=email, content=content, uuid=uuid)</span><br><span class="line">db.session.add(add_comment)</span><br><span class="line">db.session.commit()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;评论成功&quot;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">db.session.rollback()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;评论失败&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">log_v.debug(<span class="string">&quot;Comment Done   &quot;</span> + theme + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27; &#x27;</span> + content + <span class="string">&#x27; &#x27;</span> + email + <span class="string">&#x27; &#x27;</span> + t_md)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;参数不齐&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;/article/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(uuid))</span><br></pre></td></tr></table></figure><p>数据库的回滚是十分有必要的，用于处理程序或者数据错误，让程序回到上一次的状态，这就是所谓的数据库回滚，否则很可能会造成死锁或者超时，这是非常可怕的。</p><p>所以，请回滚！！！</p><hr><p>文章来源：<a href="https://mp.weixin.qq.com/s/k5MowWxKxG0yZbLrKvrh7A" title="阅读原文">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql创建远程连接用户并服务权限</title>
      <link href="/2020/10/16/mysql%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%94%A8%E6%88%B7%E5%B9%B6%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/"/>
      <url>/2020/10/16/mysql%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%94%A8%E6%88%B7%E5%B9%B6%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p><strong>创建可以远程访问的用户：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>赋予权限：</strong></p><p>格式：grant 权限 on 数据库.表名 to 用户名@登录主机 [identified by “密码”]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> Identified <span class="keyword">by</span> <span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>赋予某个权限：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update,<span class="keyword">delete</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> Identified <span class="keyword">by</span> <span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>刷新权限更改：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker拉取镜像加速</title>
      <link href="/2020/10/15/Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"/>
      <url>/2020/10/15/Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>鉴于国内网络问题，拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。</p><p><strong>Docker国内镜像：</strong></p><pre><code>网易加速器：http://hub-mirror.c.163.com官方中国加速器：https://registry.docker-cn.comustc的镜像：https://docker.mirrors.ustc.edu.cn</code></pre><p>也可使用私人镜像加速器地址，如使用阿里云的镜像加速器：登录阿里云-&gt;产品-&gt;搜索”容器镜像服务”-&gt;镜像库-&gt;镜像加速器。</p><p>新版的 Docker 使用 /etc/docker/daemon.json（Linux） 来配置 Daemon。</p><p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p><p>vi /etc/docker/daemon.json </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">　　<span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>] </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>** 配置成功后，CentOS6.5重启：**</p><p>service docker restart</p><p><strong>配置成功后，CentOS7重启：</strong></p><p>systemctl daemon-reload     #重启加速配置文件<br>systemctl restart docker    #重启docker后台服务</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像集合</title>
      <link href="/2020/10/15/Docker%E9%95%9C%E5%83%8F%E9%9B%86%E5%90%88/"/>
      <url>/2020/10/15/Docker%E9%95%9C%E5%83%8F%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><strong>使用方法：自行在hub.docker.com搜索</strong></p><table><thead><tr><th>作者ID/镜像名</th><th>简介</th><th>注释</th></tr></thead><tbody><tr><td>airsonic/airsonic</td><td>一个支持多客户端的音乐程序</td><td>支持web 移动app等</td></tr><tr><td>80x86/filebrowser</td><td>一个支持分享文件到期作废的web文件程序</td><td></td></tr><tr><td>oldiy/my-calibre-webserver-docker</td><td>一个简易的在线读书程序</td><td>安装好后自动读取图书并通过网页阅读</td></tr><tr><td>oldiy/chrome-novnc</td><td>web版远程桌面</td><td>能够用里面的浏览器在任何地方访问你的内网以及路由器</td></tr><tr><td>setzero/oneindex</td><td>可以把onedrive做存储服务器的网盘程序</td><td></td></tr><tr><td>auska/docker-verysync</td><td>威力同步docker版</td><td>全自动，无视内外网的同步软件</td></tr><tr><td>clue/adminer</td><td>一个简单的web端，用来管理Mysql数据库</td><td></td></tr><tr><td>phpmyadmin/phpmyadmin</td><td>不解释</td><td></td></tr><tr><td>linuxserver/mstream</td><td>一个类似airsonic的程序但是更简洁</td><td></td></tr><tr><td>portainer/portainer</td><td>大名鼎鼎的通过web管理docker的程序</td><td></td></tr><tr><td>oldiy/music-player-docker</td><td>整合了QQ 网易酷狗等所有国内音乐资源的web播放器</td><td></td></tr><tr><td>diygod/rsshub</td><td>可以把不支持RSS输出的网站转化为rss地址</td><td></td></tr><tr><td>chenhw2/aliyun-ddns-cli</td><td>阿里云DDNS</td><td></td></tr><tr><td>clue/h5ai</td><td>超简洁的web网盘程序</td><td></td></tr><tr><td>linuxserver/freshrss</td><td>一个可以自己搭建的在线rss 阅读器。类似google reader</td><td></td></tr><tr><td>linuxserver/jackett</td><td>待补充</td><td></td></tr><tr><td>linuxserver/radarr</td><td>待补充</td><td></td></tr><tr><td>linuxserver/qbittorrent</td><td>docker版的qb下载镜像</td><td></td></tr><tr><td>linuxserver/sonarr</td><td>待补充</td><td></td></tr><tr><td>linuxserver/bazarr</td><td>配置好了可以全自动为你NAS里的电影下载字幕</td><td></td></tr><tr><td>linuxserver/sabnzbd</td><td>观影一条龙的统一配置入口程序</td><td>一些索引需要付费，不推荐</td></tr><tr><td>linuxserver/netbootxyz</td><td>可以一键安装的网络PXE服务端程序</td><td></td></tr><tr><td>linuxserver/lidarr</td><td>可以全自动搜索下载，以及升级音质的音乐爬虫程序</td><td></td></tr><tr><td>linuxserver/kanzi</td><td>安装在服务端的KODI遥控器，可以在任何地方控制你的KODI播放器</td><td>待测试</td></tr><tr><td>linuxserver/guacd</td><td>远程桌面网关，支持 VNC, RDP, SSH等</td><td></td></tr><tr><td>linuxserver/resilio-sync</td><td>类似威力同步的软件</td><td>其实我感觉威力同步是模仿它的</td></tr><tr><td>linuxserver/beets</td><td>待补充</td><td></td></tr><tr><td>linuxserver/syncthing</td><td>又一个文件同步程序</td><td></td></tr><tr><td>linuxserver/couchpotato</td><td>类似jackett的东西</td><td></td></tr><tr><td>linuxserver/hydra</td><td>待补充</td><td></td></tr><tr><td>linuxserver/htpcmanager</td><td>待补充</td><td>PT观影一条龙的统一配置入口程序</td></tr><tr><td>linuxserver/healthchecks</td><td>可以用来创建cron定时任务的程序 支持web管理</td><td></td></tr><tr><td>lstcml/oray</td><td>花生壳内网版</td><td></td></tr><tr><td>lstcml/n1_pgy</td><td>花生壳蒲公英</td><td></td></tr><tr><td>lstcml/bypy</td><td>百度云同步工具bypy</td><td></td></tr><tr><td>lstcml/n1_kodcloud</td><td>docker版可道云</td><td></td></tr><tr><td>lstcml/alpine-nginx-php</td><td>轻量版Nginx+PHP</td><td></td></tr><tr><td>lstcml/n1_naiveboom</td><td>阅后即焚naiveboom</td><td></td></tr><tr><td>lstcml/n1_leanote</td><td>蚂蚁笔记leanote</td><td></td></tr><tr><td>lstcml/n1_webdav</td><td>Webdav服务器</td><td></td></tr><tr><td>lstcml/kms</td><td>KMS激活服务</td><td></td></tr><tr><td>lstcml/n1_dosgame</td><td>Dosgame web版dos游戏服务</td><td></td></tr><tr><td>lstcml/samba</td><td>docker版的samba</td><td></td></tr><tr><td>lstcml/n1_mmplayer</td><td>mmPlayer</td><td></td></tr><tr><td>lstcml/n1_zerotier</td><td>zerotier</td><td></td></tr><tr><td>lstcml/n2n</td><td>一款类似zerotier、蒲公英**内网穿透的开源工具</td><td></td></tr><tr><td>lstcml/duplicati</td><td>duplicati  备份、同步工具，支持FTP、Webdav、dropbox、Goodle Drive等等</td><td></td></tr><tr><td>lstcml/qq</td><td>qq</td><td></td></tr><tr><td>lstcml/freenom</td><td>freenom域名自动续期</td><td></td></tr><tr><td>lstcml/easy-explorer</td><td>易有云，一款牛*的同步+管理工具</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录_基于UptimeRobot服务器状态监控的搭建-初始</title>
      <link href="/2020/10/14/%E8%AE%B0%E5%BD%95_%E5%9F%BA%E4%BA%8EUptimeRobot%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7%E7%9A%84%E6%90%AD%E5%BB%BA-%E5%88%9D%E5%A7%8B/"/>
      <url>/2020/10/14/%E8%AE%B0%E5%BD%95_%E5%9F%BA%E4%BA%8EUptimeRobot%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7%E7%9A%84%E6%90%AD%E5%BB%BA-%E5%88%9D%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="在网上找了很多搭建方法"><a href="#在网上找了很多搭建方法" class="headerlink" title="在网上找了很多搭建方法"></a>在网上找了很多搭建方法</h2><p>一个基于 UptimeRobot API 的状态监控仪表盘(O’S tatus)：</p><ul><li><a href="https://github.com/bakaomg/OStatus">原作者GitHub</a>  ——  <a href="https://status.bakaomg.cn/#/">站点演示</a><br>但因为配置原因一直不成功，最终找到一个简单的。</li></ul><hr><h2 id="申请uptime-Robot的API"><a href="#申请uptime-Robot的API" class="headerlink" title="申请uptime Robot的API"></a>申请uptime Robot的API</h2><ol><li>进入官网：<a href="https://uptimerobot.com/">https://uptimerobot.com</a> 申请账号。<br><img src="/img/uploads/2020/10/2929991011.png" alt="1.png"></li><li>添加你需要监控的网站。<br><img src="/img/uploads/2020/10/1166597671.png" alt="2.png"></li><li>点击界面上面的My Settings，拉到最底部，API Settings这块点击Monitor-Specific API keys申请API的key。<br><img src="/img/uploads/2020/10/2623001263.png" alt="3.png"></li></ol><hr><h2 id="下载网页配置文件及更改"><a href="#下载网页配置文件及更改" class="headerlink" title="下载网页配置文件及更改"></a>下载网页配置文件及更改</h2><ol><li>下载github的文件<a href="https://github.com/yb/uptime-status/releases/tag/v1.3.0">点击下载</a> (下载1.3版本，新版本更新后没有配置成功)。</li><li>更改配置文件config.js。<br>ApiKeys中的值为从uptime Robot中获取的key值。<br>SiteUrl为你的网站连接。<br>SiteName为网点名。<br>其余按文件注释进行配置。<br><img src="/img/uploads/2020/10/591784431.png" alt="4.png"></li><li>更换favicon.ico图标。</li><li>将文件部署到支持静态网页的服务器上。<br><img src="/img/uploads/2020/10/3909627135.png" alt="5.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 站点监控 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
